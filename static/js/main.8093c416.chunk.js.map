{"version":3,"sources":["assets/img/user.png","components/api/requestsAPI.ts","redux/dialogs-reducer.ts","components/Users/Users.module.css","components/Navbar/Navbar.module.css","reportWebVitals.js","components/api/UsersApi.ts","redux/users-reducer.ts","components/Users/User.tsx","components/common/pagginator/Pagginator.tsx","components/Users/Users.tsx","components/Users/UsersSelectors.ts","components/Users/UsersContainer.tsx","components/api/UrlApi.ts","components/api/AuthApi.ts","redux/auth-reducer.ts","components/Header/Header.tsx","components/Header/HeaderContainer.tsx","components/Login/Login.tsx","redux/app-reducer.ts","redux/sidebar-reducer.ts","redux/redux-store.ts","components/hoc/withSuspense.tsx","components/Navbar/Navbar.tsx","App.tsx","index.tsx","components/common/FormsContriols/FormsControls.tsx","utils/validators/validators.ts","assets/img/preloader.svg","components/common/preloader/preloader.tsx","components/common/pagginator/Pagginator.module.css","components/Header/Header.module.css","components/common/FormsContriols/FormsControls.module.css","components/Login/Login.module.css","components/api/ProfileApi.ts","redux/profile-reducer.ts"],"names":["ResultCodesEnum","ResultCodeForCaptchaEnum","instance","axios","create","baseURL","withCredentials","headers","initialState","MessageData","message","id","DialogData","name","img","actions","addMessage","messageBody","type","dialogsReducer","state","action","messagePost","stateCopy","module","exports","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","UsersApi","delete","response","data","post","currentPage","pageSize","get","users","portionUsers","usersCounts","isFetching","isFollowingProgress","page","usersNumber","followUnfollowFlow","dispatch","userId","apiMethod","actionCreator","a","resultCode","usersReducer","map","u","followed","filter","User","props","user","unfollowSuccessThunkAction","followSuccessThunkAction","className","s","person","to","src","photos","small","userPhoto","alt","disabled","some","el","onClick","status","Pagginator","pagesCount","Math","ceil","useState","portionNumber","setPortionNumber","leftPortionNumber","rightPortionNumber","pages","i","push","pagginator","p","onPageChanged","cn","selectedPage","Users","getUsersSelector","createSelector","usersPage","getPageSize","getPortionUsers","getUsersCounts","getCurrentPage","getFetching","getFollowingProgress","UsersContainer","pageNumber","getUsersThunkAction","this","pageTitle","React","Component","compose","connect","getState","items","totalCount","UrlApi","AuthApi","email","password","rememberMe","captcha","login","auth","url","authMeThunkCreator","Success","authReducer","Header","header","href","logoutMe","HeaderContainer","maxLength30","maxLength","ReduxLoginForm","reduxForm","form","handleSubmit","error","onSubmit","Field","component","Input","placeholder","validate","required","style","summaryError","captchaImg","isAuth","loginMe","CaptchaIsRequired","stopSubmit","_error","messages","formData","inizialized","globalError","appReducer","friends","avatar","sidebarReducer","reducers","combineReducers","profilePage","profileReducer","dialogsPage","sidebar","formReducer","app","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","store","createStore","applyMiddleware","thunkMiddleWare","withSuspense","WrappedComponent","Suspense","fallback","Navbar","nav","item","activeClassName","active","ProfileContainer","lazy","DialogsContainer","SuspendedProfile","SuspendedDialogs","App","catchAllUnhandleRejection","event","console","warn","reason","showGetError","inizializedApp","addEventListener","removeEventListener","exact","path","render","AppContainer","promise","Promise","all","setTimeout","SamuraiJSApp","basename","process","ReactDOM","document","getElementById","FormControl","Element","formError","meta","touched","formControl","input","Textarea","value","countSymbols","length","Preloader","width","preloader","ProfileApi","put","file","FormData","append","PostData","likesCount","userProfile","addPostActionCreator","newMessagePost","setUserProfile","profile","setStatus","deletePost","postId","setPhotoSuccess","userProfileThunkCreator","getUserStatus","updateStatus","alert","uploadPhoto","saveForm","reject","newPost"],"mappings":"wHAAe,QAA0B,kC,gCCAzC,0GAgBYA,EAKAC,EArBZ,SAEaC,EAFb,OAEwBC,EAAMC,OAAO,CACjCC,QAAS,gDACTC,iBAAiB,EACjBC,QAAS,CACL,UAAW,2C,SAUPP,O,qBAAAA,I,kBAAAA,M,cAKAC,O,2CAAAA,M,4FCRNO,EAAe,CACjBC,YAAa,CACT,CAAEC,QAAS,KAAMC,GAAI,KACrB,CAAED,QAAS,eAAgBC,GAAI,KAC/B,CAAED,QAAS,KAAMC,GAAI,MAEzBC,WAAY,CACR,CAAEC,KAAM,SAAUF,GAAI,IAAKG,IAAK,gFAChC,CAAED,KAAM,QAASF,GAAI,IAAKG,IAAK,gFAC/B,CAAED,KAAM,OAAQF,GAAI,IAAKG,IAAK,gFAC9B,CAAED,KAAM,QAASF,GAAI,IAAKG,IAAK,gFAC/B,CAAED,KAAM,QAASF,GAAI,IAAKG,IAAK,gFAC/B,CAAED,KAAM,UAAWF,GAAI,IAAKG,IAAK,kFAyB5BC,EAAU,CACnBC,WAAY,SAACC,GAAD,MAA0B,CAClCC,KAAM,oBACND,iBAMOE,IA3BQ,WAAmE,IAAlEC,EAAiE,uDAAzDZ,EAAca,EAA2C,uCACrF,OAAQA,EAAOH,MACX,IAAK,oBACD,IAAMI,EAAc,CAChBZ,QAASW,EAAOJ,YAChBN,GAAI,KAEJY,EAAS,2BACNH,GADM,IAETX,YAAY,GAAD,mBAAMW,EAAMX,aAAZ,CAAyBa,MAExC,OAAOC,EAEX,QACI,OAAOH,K,oBC7CnBI,EAAOC,QAAU,CAAC,OAAS,wB,+DCA3BD,EAAOC,QAAU,CAAC,IAAM,oBAAoB,KAAO,qBAAqB,OAAS,uBAAuB,OAAS,yB,wCCDjH,IAYeC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,O,kKCCDQ,EAAW,SACPxB,GACT,OAAOT,IAASkC,OAAT,iBAA2CzB,IAC7CkB,MAAK,SAAAQ,GAAc,OAAOA,EAASC,SAHnCH,EAAW,SAKTxB,GACP,OAAOT,IAASqC,KAAT,iBAAyC5B,GAAM,IACjDkB,MAAK,SAAAQ,GAAQ,OAAIA,EAASC,SAP1BH,EAAW,SASXK,EAAqBC,GAC1B,OAAOvC,IAASwC,IAAT,qBAAiDF,EAAjD,kBAAsEC,IACxEZ,MAAK,SAAAQ,GAAQ,OAAIA,EAASC,SCZjC9B,EAAe,CACjBmC,MAAO,GACPF,SAAU,GACVG,aAAc,GACdC,YAAa,EACbL,YAAa,EACbM,YAAY,EACZC,oBAAqB,IAuDZhC,EACD,SAACJ,GACL,MAAO,CACHO,KAAM,eACNP,GAAIA,IAJHI,EAOC,SAACJ,GACP,MAAO,CACHO,KAAM,iBACNP,GAAIA,IAVHI,EAaC,SAAC4B,GACP,MAAO,CACHzB,KAAM,kBACNyB,MAAOA,IAhBN5B,EAmBO,SAACiC,GACb,MAAO,CACH9B,KAAM,yBACNsB,YAAaQ,IAtBZjC,EAyBO,SAACkC,GACb,MAAO,CACH/B,KAAM,qBACN2B,YAAaI,IA5BZlC,EA+BS,SAAC+B,GACf,MAAO,CACH5B,KAAM,2BACN4B,eAlCC/B,EAqCgB,SAAC+B,EAAqBnC,GAC3C,MAAO,CACHO,KAAM,kCACN4B,aACAnC,OAqBNuC,EAAkB,uCAAG,WAAOC,EAAwBC,EAAgBC,EAAgBC,GAA/D,SAAAC,EAAA,6DACvBJ,EAASpC,GAAgC,EAAMqC,IADxB,SAEJC,EAAUD,GAFN,OAGA,GAHA,OAGdI,aACLL,EAASpC,GAAgC,EAAOqC,IAChDD,EAASG,EAAcF,KALJ,2CAAH,4DAuBTK,EAvIM,WAAmE,IAAlErC,EAAiE,uDAAzDZ,EAAca,EAA2C,uCACnF,OAAQA,EAAOH,MACX,IAAK,eACD,OAAO,2BACAE,GADP,IAEIuB,MAAOvB,EAAMuB,MAAMe,KAAI,SAAAC,GACnB,OAAIA,EAAEhD,KAAOU,EAAOV,GACT,2BAAKgD,GAAZ,IAAeC,UAAU,IAEtBD,OAInB,IAAK,iBACD,OAAO,2BACAvC,GADP,IAEIuB,MAAOvB,EAAMuB,MAAMe,KAAI,SAAAC,GACnB,OAAIA,EAAEhD,KAAOU,EAAOV,GACT,2BAAKgD,GAAZ,IAAeC,UAAU,IAEtBD,OAGnB,IAAK,kBACD,OAAO,2BAAKvC,GAAZ,IAAmBuB,MAAM,YAAKtB,EAAOsB,SAEzC,IAAK,yBACD,OAAO,2BAAKvB,GAAZ,IAAmBoB,YAAanB,EAAOmB,cAE3C,IAAK,qBACD,OAAO,2BAAKpB,GAAZ,IAAmByB,YAAaxB,EAAOwB,cAE3C,IAAK,2BACD,OAAO,2BAAKzB,GAAZ,IAAmB0B,WAAYzB,EAAOyB,aAE1C,IAAK,kCACD,OAAO,2BACA1B,GADP,IAEI2B,oBAAqB1B,EAAOyB,WAAP,sBACX1B,EAAM2B,qBADK,CACgB1B,EAAOV,KACtCS,EAAM2B,oBAAoBc,QAAO,SAAAlD,GAAE,OAAIA,IAAOU,EAAOV,QAGnE,QACI,OAAOS,I,0CCzBJ0C,EAzBmB,SAACC,GAC/B,IAAQC,EAAoFD,EAApFC,KAAMC,EAA8EF,EAA9EE,2BAA4BC,EAAkDH,EAAlDG,yBAA0BnB,EAAwBgB,EAAxBhB,oBACpE,OACI,sBAAmBoB,UAAWC,IAAEC,OAAhC,UACI,cAAC,IAAD,CAASC,GAAI,YAAcN,EAAKrD,GAAhC,SACI,qBAAK4D,IAAKP,EAAKQ,OAAOC,MAAQT,EAAKQ,OAAOC,MAAQC,IAAWC,IAAI,qBAErE,8BAAMX,EAAKJ,SACL,wBAAQgB,SAAU7B,EAAoB8B,MAAK,SAAAC,GAAE,OAAIA,IAAOd,EAAKrD,MAAKoE,QAAS,WACzEd,EAA2BD,EAAKrD,KADlC,sBAIA,wBAAQiE,SAAU7B,EAAoB8B,MAAK,SAAAC,GAAE,OAAIA,IAAOd,EAAKrD,MAAKoE,QAAS,WACzEb,EAAyBF,EAAKrD,KADhC,sBAKN,8BAAMqD,EAAKnD,OACX,8BAAMmD,EAAKgB,SACX,0CACA,yCAjBMhB,EAAKrD,K,mDCyBRsE,EA5ByB,SAAClB,GAMrC,IALA,IAAImB,EAAaC,KAAKC,KAAKrB,EAAMlB,YAAckB,EAAMtB,UACrD,EAAwC4C,mBAAS,GAAjD,mBAAKC,EAAL,KAAoBC,EAApB,KACIC,GAAqBF,EAAgB,GAAKvB,EAAMnB,aAAe,EAC/D6C,EAAqBH,EAAgBvB,EAAMnB,aAC3C8C,EAAQ,GACHC,EAAI,EAAGA,GAAKT,EAAYS,IAC7BD,EAAME,KAAKD,GAEf,OACI,sBAAKxB,UAAWC,IAAEyB,WAAlB,UACKP,EAAgB,GAAK,wBAAQP,QAAS,kBAAMQ,EAAiBD,EAAgB,IAAxD,kBACrBI,EACI7B,QAAO,SAAAiB,GAAE,OAAIA,GAAMU,GAAqBV,GAAMW,KAC9C/B,KAAI,SAAAoC,GACD,OACI,sBAAMf,QAAS,kBAAMhB,EAAMgC,cAAcD,IAAI3B,UAAW6B,IAAG5B,IAAEpB,KAAH,eAAYoB,IAAE6B,aAAgBlC,EAAMvB,cAAgBsD,IAA9G,SAEKA,EAAI,SAIrB,wBAAQf,QAAS,kBAAMQ,EAAiBD,EAAgB,IAAxD,oBACGH,KAAKC,KAAKE,IAAkBH,KAAKC,KAAMF,EAAanB,EAAMnB,gBAAmB,wBAAQmC,QAAS,kBAAMQ,EAAiBD,EAAgBJ,EAAanB,EAAMnB,eAA3E,0BCA7EsD,EApBoB,SAACnC,GAChC,OACI,gCACI,cAAC,EAAD,CACInB,aAAcmB,EAAMnB,aACpBC,YAAakB,EAAMlB,YACnBJ,SAAUsB,EAAMtB,SAChBsD,cAAehC,EAAMgC,cACrBvD,YAAauB,EAAMvB,cACtBuB,EAAMpB,MAAMe,KAAI,SAAAC,GAAC,OACd,cAAC,EAAD,CACIK,KAAML,EACNM,2BAA4BF,EAAME,2BAClCC,yBAA0BH,EAAMG,yBAChCnB,oBAAqBgB,EAAMhB,6B,SChBlCoD,EAAmBC,aAJR,SAAChF,GACrB,OAAOA,EAAMiF,UAAU1D,SAG8B,SAACA,GACtD,OAAOA,EAAMkB,QAAO,SAAAF,GAAC,OAAI,QAEhB2C,EAAc,SAAClF,GACxB,OAAOA,EAAMiF,UAAU5D,UAEd8D,EAAkB,SAACnF,GAC5B,OAAOA,EAAMiF,UAAUzD,cAEd4D,EAAiB,SAACpF,GAC3B,OAAOA,EAAMiF,UAAUxD,aAEd4D,GAAiB,SAACrF,GAC3B,OAAOA,EAAMiF,UAAU7D,aAEdkE,GAAc,SAACtF,GACxB,OAAOA,EAAMiF,UAAUvD,YAEd6D,GAAuB,SAACvF,GACjC,OAAOA,EAAMiF,UAAUtD,qBCDrB6D,G,4MAMFb,cAAgB,SAACc,GACb,EAAK9C,MAAM+C,oBAAoBD,EAAY,EAAK9C,MAAMtB,W,uDAL1D,WACIsE,KAAKhD,MAAM+C,oBAAoBC,KAAKhD,MAAMvB,YAAauE,KAAKhD,MAAMtB,Y,oBAOtE,WACI,OACI,qCACI,6BAAKsE,KAAKhD,MAAMiD,YACfD,KAAKhD,MAAMjB,WAAa,cAAC,IAAD,IAAgB,KACzC,cAAC,EAAD,CACID,YAAakE,KAAKhD,MAAMlB,YACxBJ,SAAUsE,KAAKhD,MAAMtB,SACrBD,YAAauE,KAAKhD,MAAMvB,YACxBuD,cAAegB,KAAKhB,cACpBpD,MAAOoE,KAAKhD,MAAMpB,MAGlBI,oBAAqBgE,KAAKhD,MAAMhB,oBAEhCkB,2BAA4B8C,KAAKhD,MAAME,2BACvCC,yBAA0B6C,KAAKhD,MAAMG,yBACrCtB,aAAcmE,KAAKhD,MAAMnB,sB,GA3BhBqE,IAAMC,WA2DpBC,eAAQC,aAbC,SAAChG,GACrB,MAAO,CACHuB,MAAOwD,EAAiB/E,GACxBqB,SAAU6D,EAAYlF,GACtByB,YAAa2D,EAAepF,GAC5BoB,YAAaiE,GAAerF,GAC5B0B,WAAY4D,GAAYtF,GACxB2B,oBAAqB4D,GAAqBvF,GAC1CwB,aAAc2D,EAAgBnF,MAO9B,CAII0F,oBLuBuB,SAAC9D,EAAcP,GAC9C,8CAAO,WAAOU,EAAUkE,GAAjB,eAAA9D,EAAA,6DACHJ,EAASpC,GAAyB,IAClCoC,EAASpC,EAAuBiC,IAF7B,SAGgBb,EAAkBa,EAAMP,GAHxC,OAGGH,EAHH,OAIHa,EAASpC,GAAyB,IAClCoC,EAASpC,EAAiBuB,EAAKgF,QAC/BnE,EAASpC,EAAuBuB,EAAKiF,aANlC,2CAAP,yDKvBQtD,2BL2C8B,SAACb,GACvC,8CAAO,WAAOD,GAAP,SAAAI,EAAA,sDACHL,EAAmBC,EAAUC,EAAQjB,EAAuBpB,GADzD,2CAAP,uDK3CQmD,yBL+C4B,SAACd,GACrC,8CAAO,WAAOD,GAAP,SAAAI,EAAA,sDACHL,EAAmBC,EAAUC,EAAQjB,EAAqBpB,GADvD,2CAAP,yDKxDWoG,CAUVP,IC/FQY,GAAS,WAEd,OAAOtH,IAASwC,IAAwB,4BACnCb,MAAK,SAAAQ,GAAQ,OAAIA,EAASC,SCS1BmF,GAAU,WAEf,OAAOvH,IAASwC,IAAyC,WACpDb,MAAK,SAAAQ,GAAQ,OAAIA,EAASC,SAH1BmF,GAAU,SAKbC,EAAeC,GAA+E,IAA7DC,EAA4D,wDAA/BC,EAA+B,uDAAN,KACzF,OAAO3H,IAASqC,KAAyF,aAAc,CAAEmF,QAAOC,WAAUC,aAAYC,aANjJJ,GAAU,WASf,OAAOvH,IAASkC,OAA4C,e,SClB9D5B,GAAe,CACjB4C,OAAQ,KACRsE,MAAO,KACPI,MAAO,KACPC,MAAM,EACNC,IAAK,MAyBIjH,GACI,SAACqC,EAAuBsE,EAAsBI,EAAsBC,GAApE,MAAuF,CAAE7G,KAAM,qBAAsBoB,KAAM,CAAEc,SAAQsE,QAAOI,QAAOC,UADvJhH,GAEM,SAACiH,GAAD,MAAkB,CAAE9G,KAAM,uBAAwB8G,QAIxDC,GAAqB,yDAAiB,WAAO9E,GAAP,uBAAAI,EAAA,sEAC5BkE,KAD4B,QACzCnF,EADyC,QAGtCkB,aAAexD,IAAgBkI,UAAU,EACjB5F,EAAKA,KAA1B3B,EADqC,EACrCA,GAAI+G,EADiC,EACjCA,MAAOI,EAD0B,EAC1BA,MACnB3E,EAASpC,GAAoBJ,EAAI+G,EAAOI,GAAO,KALJ,2CAAjB,uDAiCnBK,GA5DK,WAAmE,IAAlE/G,EAAiE,uDAAzDZ,GAAca,EAA2C,uCAClF,OAAQA,EAAOH,MACX,IAAK,qBACD,OAAO,2BACAE,GACAC,EAAOiB,MAElB,IAAK,uBACD,OAAO,2BACAlB,GADP,IAEI4G,IAAK3G,EAAO2G,MAEpB,QACI,OAAO5G,I,oBCNJgH,GAboD,SAACrE,GAChE,OACI,yBAAQI,UAAWC,KAAEiE,OAArB,UACI,qBAAK9D,IAAI,sDACT,qBAAKJ,UAAWC,KAAE0D,MAAlB,SACK/D,EAAMgE,KACD,gCAAK,mBAAGO,KAAK,IAAR,SAAavE,EAAM2D,QAAxB,IAAmC,wBAAQ3C,QAAShB,EAAMwE,SAAvB,oBAAnC,OACA,cAAC,IAAD,CAASjE,GAAG,QAAZ,yBCXhBkE,G,4JACF,WAEI,OACI,cAAC,GAAD,eAAYzB,KAAKhD,Y,GAJCkD,IAAMC,WAarBE,gBALS,SAAChG,GAAD,MAA0B,CAC9C2G,KAAM3G,EAAM2G,KAAKA,KACjBL,MAAOtG,EAAM2G,KAAKL,SAG6E,CAAEa,SFiD7E,yDAAiB,WAAOpF,GAAP,SAAAI,EAAA,sEACdkE,KADc,cAExBnF,KAAKkB,aAAexD,IAAgBkI,SAC7C/E,EAASpC,GAAoB,KAAM,KAAM,MAAM,IAHd,2CAAjB,wDEjDTqG,CAAkGoB,I,0DCV3GC,GAAcC,aAAU,IA4BxBC,GAAiBC,aAAkD,CACrEC,KAAM,aADaD,EAxBoF,SAAC,GAAkC,IAAhCE,EAA+B,EAA/BA,aAAcC,EAAiB,EAAjBA,MAAOf,EAAU,EAAVA,IAC/H,OACI,uBAAMgB,SAAUF,EAAhB,UACI,8BACI,cAACG,GAAA,EAAD,CAAOpI,KAAM,QAASqI,UAAWC,KAAOC,YAAa,QAASC,SAAU,CAACC,KAAUb,QAEvF,8BACI,cAACQ,GAAA,EAAD,CAAOpI,KAAM,WAAYqI,UAAWC,KAAOC,YAAa,WAAYC,SAAU,CAACC,MAAWpI,KAAK,eAEnG,gCACI,cAAC+H,GAAA,EAAD,CAAOpI,KAAM,aAAcqI,UAAWC,KAAOjI,KAAM,aADvD,kBAGC6H,GAAS,qBAAK5E,UAAWoF,KAAMC,aAAtB,SACLT,IAEJf,GAAO,qBAAKzD,IAAKyD,EAAKrD,IAAI,UAAUR,UAAWoF,KAAME,aACrDzB,GAAO,cAACiB,GAAA,EAAD,CAAOpI,KAAM,UAAWqI,UAAWC,KAAOC,YAAa,UAAWC,SAAU,CAACC,QACrF,8BACI,mDA6CDlC,gBALS,SAAChG,GAAD,MAA6C,CACjEsI,OAAQtI,EAAM2G,KAAKA,KACnBC,IAAK5G,EAAM2G,KAAKC,OAGoB,CAAE2B,QHvBnB,SAACjC,EAAeC,EAAkBC,EAAqBC,GAAvD,8CAAsF,WAAO1E,GAAP,qBAAAI,EAAA,sEAClFkE,GAAcC,EAAOC,EAAUC,EAAYC,GADuC,WACnGxF,EADmG,QAE5FC,KAAKkB,aAAexD,IAAgBkI,QAFwD,gBAGrG/E,EAAS8E,MAH4F,0BAKjG5F,EAASC,KAAKkB,aAAevD,IAAyB2J,kBAL2C,kCAM9EpC,KAN8E,QAM3FlF,EAN2F,OAO3F0F,EAAM1F,EAAK0F,IACjB7E,EAASpC,GAAsBiH,IARkE,QAUjG3G,EAASwI,aAAW,YAAa,CAAEC,OAAQzH,EAASC,KAAKyH,SAAS,KACtE5G,EAAS9B,GAX4F,4CAAtF,wDGuBR+F,EApBoB,SAACrD,GAIhC,OAAIA,EAAM2F,OACC,cAAC,IAAD,CAAUpF,GAAG,aAGpB,qCACI,uCACA,cAACqE,GAAD,CAAgBK,SATD,SAACgB,GACpBjG,EAAM4F,QAAQK,EAAStC,MAAOsC,EAASrC,SAAUqC,EAASpC,WAAYoC,EAASnC,UAQjCG,IAAKjE,EAAMiE,YC/D3DxH,GAAe,CACjByJ,aAAa,EACbC,YAAa,MA0BXnJ,GACU,iBAAO,CAAEG,KAAM,oBADzBH,GAEQ,SAACgI,GAAD,MAA2B,CAAE7H,KAAM,YAAa6H,UAkB/CoB,GAxCI,WAAmE,IAAlE/I,EAAiE,uDAAzDZ,GAAca,EAA2C,uCACjF,OAAQA,EAAOH,MACX,IAAK,kBACD,OAAO,2BACAE,GADP,IAEI6I,aAAa,IAErB,IAAK,YACD,OAAO,2BACA7I,GADP,IAEI8I,YAAa7I,EAAO0H,QAE5B,QACI,OAAO3H,I,mBCrBbZ,GAAe,CACjB4J,QAAS,CACL,CAAEvJ,KAAM,SAAUwJ,OAAQ,iEAC1B,CAAExJ,KAAM,QAASwJ,OAAQ,iEACzB,CAAExJ,KAAM,QAASwJ,OAAQ,mEAUlBC,GALQ,WAA0D,IAAzDlJ,EAAwD,uDAAhDZ,GAExBe,EAAS,eAAQH,GACrB,OAAOG,G,oBCPPgJ,GAAWC,YAAgB,CAC3BC,YAAaC,KACbC,YAAaxJ,KACbyJ,QAASN,GACTjE,UAAW5C,EACXsE,KAAMI,GACNU,KAAMgC,KACNC,IAAKX,KAYHY,GAAmBC,OAAOC,sCAAwC9D,IAMzD+D,GAJDC,YAAYZ,GAAUQ,GAAiBK,YAAgBC,QClBtDC,OAVf,SAA2BC,GACvB,OAAO,SAACxH,GACJ,OACI,cAAC,IAAMyH,SAAP,CAAgBC,SAAU,6CAA1B,SACI,cAACF,EAAD,eAAsBxH,Q,oBC2BvB2H,GA9BU,SAAC3H,GACtB,OACI,sBAAKI,UAAWC,KAAEuH,IAAlB,UACI,qBAAKxH,UAAWC,KAAEwH,KAAlB,SACI,cAAC,IAAD,CAAStH,GAAG,WAAWuH,gBAAiBzH,KAAE0H,OAA1C,uBAEJ,qBAAK3H,UAAWC,KAAEwH,KAAlB,SACI,cAAC,IAAD,CAAStH,GAAG,WAAWuH,gBAAiBzH,KAAE0H,OAA1C,wBAEJ,qBAAK3H,UAAWC,KAAEwH,KAAlB,SACI,cAAC,IAAD,CAAStH,GAAG,SAASuH,gBAAiBzH,KAAE0H,OAAxC,qBAEJ,qBAAK3H,UAAWC,KAAEwH,KAAlB,SACI,cAAC,IAAD,CAAStH,GAAG,KAAZ,oBAEJ,qBAAKH,UAAWC,KAAEwH,KAAlB,SACI,cAAC,IAAD,CAAStH,GAAG,KAAZ,qBAEJ,qBAAKH,UAAWC,KAAEwH,KAAlB,SACI,cAAC,IAAD,CAAStH,GAAG,KAAZ,wBAEJ,qBAAKH,UAAWC,KAAEwH,KAAlB,SACI,cAAC,IAAD,CAAStH,GAAG,IAAZ,2BCTVyH,GAAmB9E,IAAM+E,MAAK,kBAAM,iCACpCC,GAAmBhF,IAAM+E,MAAK,kBAAM,iCAUpCE,GAAmBZ,GAAaS,IAChCI,GAAmBb,GAAaW,IAEhCG,G,4MACJC,0BAA4B,SAACC,GAC3BC,QAAQC,KAAK,uRAAkEF,EAAMG,QACrF,EAAK1I,MAAM2I,aAAaJ,EAAMG,OAAO/L,U,uDAEvC,WACEqG,KAAKhD,MAAM4I,iBACX3B,OAAO4B,iBAAiB,qBAAsB7F,KAAKsF,6B,kCAErD,WACErB,OAAO6B,oBAAoB,qBAAsB9F,KAAKsF,6B,oBAExD,WACE,OAAKtF,KAAKhD,MAAMkG,YAEd,sBAAK9F,UAAU,cAAf,UACE,cAAC,GAAD,IACA,cAAC,GAAD,IACA,qBAAKA,UAAU,sBAAf,SACE,eAAC,IAAD,WACE,cAAC,IAAD,CAAO2I,OAAK,EAACC,KAAK,IAAIC,OAAQ,kBAAM,cAAC,IAAD,CAAU1I,GAAG,gBACjD,cAAC,IAAD,CAAOyI,KAAK,oBAAoBC,OAAQ,kBAAM,cAACd,GAAD,OAC9C,cAAC,IAAD,CAAOa,KAAK,WAAWC,OAAQ,kBAAM,cAACb,GAAD,OACrC,cAAC,IAAD,CAAOY,KAAK,SAASC,OAAQ,kBAAM,cAAC,GAAD,CAAgBhG,UAAU,kDAC7D,cAAC,IAAD,CAAO+F,KAAK,QAAQC,OAAQ,kBAAM,cAAC,GAAD,OAClC,cAAC,IAAD,CAAOD,KAAK,KAAKC,OAAQ,kBAAM,2DAZH,cAAC,IAAD,Q,GAbtB/F,IAAMC,WAoClB+F,GAAe9F,YACnBC,aALsB,SAAChG,GAAD,MAA0B,CAChD6I,YAAa7I,EAAM0J,IAAIb,YACvBC,YAAa9I,EAAM0J,IAAIZ,eAGE,CAAEyC,eL3BC,kBAAM,SAACxJ,GACjC,IAAM+J,EAAU/J,EAAS8E,MACzBkF,QAAQC,IAAI,CAACF,IACRrL,MAAK,kBAAMsB,EAASpC,WKwBgB2L,aLrBjB,SAAC3D,GAAD,OAA0B,SAAC5F,GACnDA,EAASpC,GAAiBgI,IAC1BsE,YAAW,kBAAMlK,EAASpC,GAAiB,SAAQ,SKkBlCoG,CACyCiF,IAS/CkB,GAPgB,WAC7B,OAAO,cAAC,IAAD,CAAeC,SAAUC,iBAAzB,SACL,cAAC,IAAD,CAAUtC,MAAOA,GAAjB,SACE,cAAC+B,GAAD,SClENQ,IAAST,OACL,cAAC,GAAD,IACEU,SAASC,eAAe,SAM9BjM,K,8ICCMkM,EAAc,SAACC,GAAD,OAAwC,SAAC9J,GACzD,IAAM+J,EAAY/J,EAAMgK,KAAKC,SAAWjK,EAAMgK,KAAKhF,MACnD,OACI,sBAAK5E,UAAWoF,IAAM0E,YAAc,KAAOH,EAAYvE,IAAMR,MAAQ,IAArE,UACI,8BACI,cAAC8E,EAAD,2BAAa9J,EAAMmK,OAAWnK,MAEjC+J,GAAa,+BAAO/J,EAAMgK,KAAKhF,aAO/BoF,EAAWP,EAAY,YAEvBzE,EAAQyE,EAAY,U,gCC9BjC,oEAAO,IAAMtE,EAA+B,SAAC8E,GACzC,IAAIA,EACJ,MAAO,0BAEE1F,EAAY,SAAC2F,GAAD,OAA8C,SAACD,GACpE,GAAIA,EAAME,OAASD,EACf,MAAM,iCAAN,OAAwCA,EAAxC,e,yCCRO,MAA0B,sC,OCW1BE,IARa,WACxB,OACI,qBAAKhF,MAAO,CAAEiF,MAAO,SAArB,SACI,qBAAKjK,IAAKkK,EAAW9J,IAAI,kB,mBCLrCnD,EAAOC,QAAU,CAAC,aAAe,iCAAiC,KAAO,yBAAyB,WAAa,iC,mBCA/GD,EAAOC,QAAU,CAAC,OAAS,uBAAuB,MAAQ,wB,mBCA1DD,EAAOC,QAAU,CAAC,YAAc,mCAAmC,MAAQ,+B,mBCA3ED,EAAOC,QAAU,CAAC,aAAe,4BAA4B,WAAa,4B,uSCK7DiN,EAAa,SACX/N,GACP,OAAOT,IAASwC,IAAT,kBAAqC/B,IACvCkB,MAAK,SAAAQ,GAAQ,OAAIA,EAASC,SAH1BoM,EAAa,SAKZtL,GACN,OAAOlD,IAASwC,IAAT,0BAAwCU,IAC1CvB,MAAK,SAAAQ,GAAQ,OAAIA,EAASC,SAP1BoM,EAAa,SASZ1J,GACN,OAAO9E,IAASyO,IAAqB,kBAAmB,CAAE3J,OAAQA,IAC7DnD,MAAK,SAAAQ,GAAQ,OAAIA,EAASC,SAX1BoM,EAAa,SAabE,GACL,IAAM5E,EAAW,IAAI6E,SAErB,OADA7E,EAAS8E,OAAO,QAASF,GAClB1O,IAASyO,IAA2C,iBAAkB3E,EAAU,CACnFzJ,QAAS,CACL,eAAgB,yBAGnBsB,MAAK,SAAAQ,GAAQ,OAAIA,EAASC,SArB1BoM,EAAa,SAuBV7F,GACR,OAAO3I,IAASyO,IAAqB,UAAW9F,GAC3ChH,MAAK,SAAAQ,GAAQ,OAAIA,EAASC,SCrBjC9B,EAAe,CACjBuO,SAAU,CACN,CAAEpO,GAAI,EAAGD,QAAS,mBAAoBsO,WAAY,YAClD,CAAErO,GAAI,EAAGD,QAAS,qBAAuBsO,WAAY,WACrD,CAAErO,GAAI,EAAGD,QAAS,SAAUsO,WAAY,WACxC,CAAErO,GAAI,EAAGD,QAAS,SAAUsO,WAAY,YAE5CC,YAAa,KACbjK,OAAQ,IA4CCjE,EAAU,CACnBmO,qBAAsB,SAACC,GACnB,MAAO,CACHjO,KAAM,mBACNiO,mBAGRC,eAAgB,SAACC,GACb,MAAO,CACHnO,KAAM,2BACNmO,YAGRC,UAAW,SAACtK,GACR,MAAO,CACH9D,KAAM,0BACN8D,WAGRuK,WAAY,SAACC,GACT,MAAO,CACHtO,KAAM,sBACNsO,WAGRC,gBAAiB,SAACb,GACd,MAAO,CACH1N,KAAM,oBACN0N,UAUCc,EAA0B,SAACtM,GACpC,8CAAO,WAAOD,GAAP,eAAAI,EAAA,sEACgBmL,EAAsBtL,GADtC,OACGd,EADH,OAEHa,EAASpC,EAAQqO,eAAe9M,IAF7B,2CAAP,uDAKSqN,EAAgB,SAACvM,GAAD,8CAA+B,WAAOD,GAAP,eAAAI,EAAA,sEACrCmL,EAAqBtL,GADgB,OAClDd,EADkD,OAExDa,EAASpC,EAAQuO,UAAUhN,IAF6B,2CAA/B,uDAKhBsN,EAAe,SAAC5K,GAAD,8CAA+B,WAAO7B,GAAP,SAAAI,EAAA,+EAEhCmL,EAAqB1J,GAFW,OAG3B,IAH2B,OAG1CxB,YACLL,EAASpC,EAAQuO,UAAUtK,IAJoB,gDAOnD6K,MAAM,KAAMxN,SAAS2C,QAP8B,yDAA/B,uDAUf8K,EAAc,SAAClB,GAAD,8CAAiC,WAAOzL,GAAP,eAAAI,EAAA,sEACrCmL,EAAoBE,GADiB,OAEhC,KADlBtM,EADkD,QAE/CkB,YACLL,EAASpC,EAAQ0O,gBAAgBnN,EAAKA,KAAKkC,SAHS,2CAAjC,uDAMduL,EAAW,SAAC/F,GAAD,8CAAsC,WAAO7G,EAAUkE,GAAjB,mBAAA9D,EAAA,sEACvCmL,EAAuB1E,GADgB,UACpD1H,EADoD,OAEpDc,EAASiE,IAAWU,KAAK3E,OACP,IAApBd,EAAKkB,WAHiD,gBAItDL,EAASuM,EAAwBtM,IAJqB,8BAMlD/B,EAASwI,YAAW,kBAAmB,CAAEC,OAAQxH,EAAKyH,SAAS,KACnE5G,EAAS9B,GAP6C,kBAQ/C8L,QAAQ6C,OAAO1N,EAAKyH,SAAS,KARkB,4CAAtC,yDAYTW,IArHQ,WAAkE,IAAjEtJ,EAAgE,uDAAxDZ,EAAca,EAA0C,uCACpF,OAAQA,EAAOH,MACX,IAAK,mBACD,IAAM+O,EAAU,CACZtP,GAAI,EACJD,QAASW,EAAO8N,eAChBH,WAAY,WAEZzN,EAAS,2BACNH,GADM,IAET2N,SAAS,GAAD,mBAAM3N,EAAM2N,UAAZ,CAAsBkB,MAElC,OAAO1O,EAEX,IAAK,2BACD,OAAO,2BACAH,GADP,IAEI6N,YAAa5N,EAAOgO,UAE5B,IAAK,0BACD,OAAO,2BACAjO,GADP,IAEI4D,OAAQ3D,EAAO2D,SAEvB,IAAK,sBACD,OAAO,2BACA5D,GADP,IAEI2N,SAAU,YAAI3N,EAAM2N,UAAUlL,QAAO,SAAAiC,GAAC,OAAIA,EAAEnF,KAAOU,EAAOmO,YAElE,IAAK,oBACD,OAAO,2BACApO,GADP,IAEI6N,YAAY,2BAAM7N,EAAM6N,aAAb,IAA0BzK,OAAQnD,EAAOuN,SAE5D,QACI,OAAOxN,M","file":"static/js/main.8093c416.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/user.96156881.png\";","import axios from \"axios\"\r\n\r\nexport const instance = axios.create({\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.0/',\r\n    withCredentials: true,\r\n    headers: {\r\n        'API-KEY': 'c8f4bb25-94f1-4ddf-880b-405bea8616e0'\r\n    }\r\n})\r\n\r\nexport type APIResponseType<D = {}, RC = ResultCodesEnum> = {\r\n    data: D,\r\n    messages: Array<string>,\r\n    resultCode: RC\r\n}\r\n\r\nexport enum ResultCodesEnum {\r\n    Success = 0,\r\n    Error = 1\r\n}\r\n\r\nexport enum ResultCodeForCaptchaEnum {\r\n    CaptchaIsRequired = 10\r\n}","import { InferActionsTypes } from \"./redux-store\";\r\n\r\ntype MessageDataType = {\r\n    message: string,\r\n    id: string\r\n}\r\n\r\ntype DialogsDataType = {\r\n    name: string,\r\n    id: string,\r\n    img: string\r\n}\r\n\r\nconst initialState = {\r\n    MessageData: [\r\n        { message: 'HI', id: '1' },\r\n        { message: 'How are you?', id: '2' },\r\n        { message: 'YO', id: '3' }\r\n    ] as Array<MessageDataType>,\r\n    DialogData: [\r\n        { name: 'Rodion', id: '1', img: 'https://i.pinimg.com/originals/30/c9/86/30c986e10703ca3a76f0db7deb5bc1c9.jpg' },\r\n        { name: 'Artem', id: '2', img: 'https://i.pinimg.com/originals/30/c9/86/30c986e10703ca3a76f0db7deb5bc1c9.jpg' },\r\n        { name: 'Vlad', id: '3', img: 'https://i.pinimg.com/originals/30/c9/86/30c986e10703ca3a76f0db7deb5bc1c9.jpg' },\r\n        { name: 'Sasha', id: '4', img: 'https://i.pinimg.com/originals/30/c9/86/30c986e10703ca3a76f0db7deb5bc1c9.jpg' },\r\n        { name: 'Yulia', id: '5', img: 'https://i.pinimg.com/originals/30/c9/86/30c986e10703ca3a76f0db7deb5bc1c9.jpg' },\r\n        { name: 'Kamilla', id: '6', img: 'https://i.pinimg.com/originals/30/c9/86/30c986e10703ca3a76f0db7deb5bc1c9.jpg' }\r\n    ] as Array<DialogsDataType>\r\n}\r\n\r\nexport type initialStateType = typeof initialState;\r\ntype ActionsTypes = InferActionsTypes<typeof actions>\r\n\r\nconst dialogsReducer = (state = initialState, action: ActionsTypes): initialStateType => {\r\n    switch (action.type) {\r\n        case 'auth/SEND_MESSAGE': {\r\n            const messagePost = {\r\n                message: action.messageBody,\r\n                id: '7'\r\n            }\r\n            let stateCopy = {\r\n                ...state,\r\n                MessageData: [...state.MessageData, messagePost],\r\n            };\r\n            return stateCopy;\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const actions = {\r\n    addMessage: (messageBody: string) => ({\r\n        type: 'auth/SEND_MESSAGE',\r\n        messageBody\r\n    } as const)\r\n}\r\n\r\n\r\n\r\nexport default dialogsReducer;","// extracted by mini-css-extract-plugin\nmodule.exports = {\"person\":\"Users_person__3aA72\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"nav\":\"Navbar_nav__zCxlo\",\"item\":\"Navbar_item__3tBjH\",\"active\":\"Navbar_active__2cqTt\",\"friend\":\"Navbar_friend__2vK_f\"};","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { UserType } from \"../../types/types\";\r\nimport { instance, APIResponseType } from \"./requestsAPI\";\r\n\r\nexport type getUsersResponseType = {\r\n    items: Array<UserType>,\r\n    totalCount: number,\r\n    error: string\r\n}\r\nexport const UsersApi = {\r\n    userUnfollow(id: number) {\r\n        return instance.delete<APIResponseType>(`follow/${id}`)\r\n            .then(response => { return response.data; });\r\n    },\r\n    userFollow(id: number) {\r\n        return instance.post<APIResponseType>(`follow/${id}`, {})\r\n            .then(response => response.data);\r\n    },\r\n    getUsers(currentPage: number, pageSize: number) {\r\n        return instance.get<getUsersResponseType>(`users?page=${currentPage}&count=${pageSize}`)\r\n            .then(response => response.data);\r\n    }\r\n};\r\n","import { PhotosType, UserType } from './../types/types';\r\nimport { UsersApi } from \"../components/api/UsersApi\";\r\nimport { Dispatch } from 'react';\r\nimport { AppStateType, BaseThunkType, InferActionsTypes } from './redux-store';\r\nimport { ThunkAction } from 'redux-thunk';\r\n\r\n\r\nconst initialState = {\r\n    users: [] as Array<UserType>,\r\n    pageSize: 10,\r\n    portionUsers: 25,\r\n    usersCounts: 0,\r\n    currentPage: 1,\r\n    isFetching: false,\r\n    isFollowingProgress: [] as Array<number> // array of users ids\r\n}\r\n\r\ntype InitialStateType = typeof initialState\r\n\r\nconst usersReducer = (state = initialState, action: ActionsTypes): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'users/FOLLOW':\r\n            return {\r\n                ...state,\r\n                users: state.users.map(u => {\r\n                    if (u.id === action.id) {\r\n                        return { ...u, followed: true }\r\n                    }\r\n                    return u;\r\n                })\r\n            }\r\n\r\n        case 'users/UNFOLLOW':\r\n            return {\r\n                ...state,\r\n                users: state.users.map(u => {\r\n                    if (u.id === action.id) {\r\n                        return { ...u, followed: false }\r\n                    }\r\n                    return u;\r\n                })\r\n            }\r\n        case 'users/SET_USERS': {\r\n            return { ...state, users: [...action.users] }\r\n        }\r\n        case 'users/SET_CURRENT_PAGE': {\r\n            return { ...state, currentPage: action.currentPage }\r\n        }\r\n        case 'users/USERS_COUNTS': {\r\n            return { ...state, usersCounts: action.usersCounts }\r\n        }\r\n        case 'users/TOGGLE_IS_FETCHING': {\r\n            return { ...state, isFetching: action.isFetching }\r\n        }\r\n        case 'users/TOGGLE_FOLLOWING_PROGRESS': {\r\n            return {\r\n                ...state,\r\n                isFollowingProgress: action.isFetching\r\n                    ? [...state.isFollowingProgress, action.id]\r\n                    : state.isFollowingProgress.filter(id => id !== action.id)\r\n            }\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\ntype ActionsTypes = InferActionsTypes<typeof actions>;\r\n\r\nexport const actions = {\r\n    follow: (id: number) => {\r\n        return {\r\n            type: 'users/FOLLOW',\r\n            id: id\r\n        } as const\r\n    },\r\n    unfollow: (id: number) => {\r\n        return {\r\n            type: 'users/UNFOLLOW',\r\n            id: id\r\n        } as const\r\n    },\r\n    setUsers: (users: Array<UserType>) => {\r\n        return {\r\n            type: 'users/SET_USERS',\r\n            users: users\r\n        } as const\r\n    },\r\n    setCurrentPage: (page: number) => {\r\n        return {\r\n            type: 'users/SET_CURRENT_PAGE',\r\n            currentPage: page\r\n        } as const\r\n    },\r\n    setUsersCounts: (usersNumber: number) => {\r\n        return {\r\n            type: 'users/USERS_COUNTS',\r\n            usersCounts: usersNumber\r\n        } as const\r\n    },\r\n    toggleIsFetching: (isFetching: boolean) => {\r\n        return {\r\n            type: 'users/TOGGLE_IS_FETCHING',\r\n            isFetching\r\n        } as const\r\n    },\r\n    toggleFollowingProgress: (isFetching: boolean, id: number) => {\r\n        return {\r\n            type: 'users/TOGGLE_FOLLOWING_PROGRESS',\r\n            isFetching,\r\n            id\r\n        } as const\r\n    }\r\n}\r\n\r\n\r\ntype DispatchType = Dispatch<ActionsTypes>;\r\ntype ThunkType = BaseThunkType<ActionsTypes>;\r\n\r\n\r\nexport const getUsersThunkAction = (page: number, pageSize: number): ThunkType => {\r\n    return async (dispatch, getState) => {\r\n        dispatch(actions.toggleIsFetching(true));\r\n        dispatch(actions.setCurrentPage(page));\r\n        const data = await UsersApi.getUsers(page, pageSize)\r\n        dispatch(actions.toggleIsFetching(false))\r\n        dispatch(actions.setUsers(data.items));\r\n        dispatch(actions.setUsersCounts(data.totalCount))\r\n    }\r\n}\r\n\r\nconst followUnfollowFlow = async (dispatch: DispatchType, userId: number, apiMethod: any, actionCreator: (userId: number) => ActionsTypes) => {\r\n    dispatch(actions.toggleFollowingProgress(true, userId))\r\n    const data = await apiMethod(userId)\r\n    if (data.resultCode == 0) {\r\n        dispatch(actions.toggleFollowingProgress(false, userId))\r\n        dispatch(actionCreator(userId))\r\n    }\r\n}\r\n\r\n\r\nexport const unfollowSuccessThunkAction = (userId: number): ThunkType => {\r\n    return async (dispatch) => {\r\n        followUnfollowFlow(dispatch, userId, UsersApi.userUnfollow, actions.unfollow)\r\n    }\r\n}\r\nexport const followSuccessThunkAction = (userId: number): ThunkType => {\r\n    return async (dispatch) => {\r\n        followUnfollowFlow(dispatch, userId, UsersApi.userFollow, actions.follow)\r\n    }\r\n}\r\n\r\n\r\n\r\nexport default usersReducer;","import React from 'react';\r\nimport { NavLink } from 'react-router-dom';\r\nimport s from './Users.module.css'\r\nimport userPhoto from '../../assets/img/user.png';\r\nimport { PhotosType, UserType } from '../../types/types';\r\n\r\ntype PropsType = {\r\n    user: UserType,\r\n    unfollowSuccessThunkAction: (userId: number) => void,\r\n    followSuccessThunkAction: (userId: number) => void,\r\n    isFollowingProgress: Array<number>,\r\n}\r\n\r\nconst User: React.FC<PropsType> = (props) => {\r\n    const { user, unfollowSuccessThunkAction, followSuccessThunkAction, isFollowingProgress } = props;\r\n    return (\r\n        <div key={user.id} className={s.person}>\r\n            <NavLink to={'/profile/' + user.id}>\r\n                <img src={user.photos.small ? user.photos.small : userPhoto} alt='persons photos' />\r\n            </NavLink>\r\n            <div>{user.followed\r\n                ? <button disabled={isFollowingProgress.some(el => el === user.id)} onClick={() => {\r\n                    unfollowSuccessThunkAction(user.id)\r\n                }\r\n                }>Unfollow</button>\r\n                : <button disabled={isFollowingProgress.some(el => el === user.id)} onClick={() => {\r\n                    followSuccessThunkAction(user.id)\r\n                }\r\n                }>Follow</button>}\r\n            </div>\r\n            <div>{user.name}</div>\r\n            <div>{user.status}</div>\r\n            <div>country</div>\r\n            <div>city</div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default User;","import React from 'react';\r\nimport { useState } from 'react';\r\nimport s from './Pagginator.module.css'\r\nimport cn from 'classnames'\r\n\r\n\r\ntype PropsType = {\r\n    usersCounts: number,\r\n    pageSize: number,\r\n    portionUsers: number,\r\n    currentPage: number,\r\n    onPageChanged: (pageNum: number) => void\r\n}\r\nconst Pagginator: React.FC<PropsType> = (props) => {\r\n    let pagesCount = Math.ceil(props.usersCounts / props.pageSize);\r\n    let [portionNumber, setPortionNumber] = useState(1);\r\n    let leftPortionNumber = (portionNumber - 1) * props.portionUsers + 1;\r\n    let rightPortionNumber = portionNumber * props.portionUsers;\r\n    let pages = [];\r\n    for (let i = 1; i <= pagesCount; i++) {\r\n        pages.push(i)\r\n    }\r\n    return (\r\n        <div className={s.pagginator}>\r\n            {portionNumber > 1 && <button onClick={() => setPortionNumber(portionNumber - 1)}>Prev</button>}\r\n            {pages\r\n                .filter(el => el >= leftPortionNumber && el <= rightPortionNumber)\r\n                .map(p => {\r\n                    return (\r\n                        <span onClick={() => props.onPageChanged(p)} className={cn(s.page, { [s.selectedPage]: (props.currentPage === p) })\r\n                        }>\r\n                            {p + ' '}\r\n                        </span>\r\n                    )\r\n                })}\r\n            <button onClick={() => setPortionNumber(portionNumber + 1)}>Next</button>\r\n            {!(Math.ceil(portionNumber) == Math.ceil((pagesCount / props.portionUsers))) && <button onClick={() => setPortionNumber(portionNumber = pagesCount / props.portionUsers)}>Lastpage</button>}\r\n        </div >\r\n    )\r\n}\r\n\r\nexport default Pagginator;","import React from 'react';\r\nimport User from './User';\r\nimport Pagginator from '../common/pagginator/Pagginator';\r\nimport { UserType } from '../../types/types';\r\n\r\ntype PropsType = {\r\n    usersCounts: number,\r\n    pageSize: number,\r\n    portionUsers: number,\r\n    currentPage: number,\r\n    onPageChanged: (pageNum: number) => void,\r\n    users: Array<UserType>,\r\n    unfollowSuccessThunkAction: (userId: number) => void,\r\n    followSuccessThunkAction: (userId: number) => void,\r\n    isFollowingProgress: Array<number>\r\n}\r\nconst Users: React.FC<PropsType> = (props) => {\r\n    return (\r\n        <div >\r\n            <Pagginator\r\n                portionUsers={props.portionUsers}\r\n                usersCounts={props.usersCounts}\r\n                pageSize={props.pageSize}\r\n                onPageChanged={props.onPageChanged}\r\n                currentPage={props.currentPage} />\r\n            {props.users.map(u =>\r\n                <User\r\n                    user={u}\r\n                    unfollowSuccessThunkAction={props.unfollowSuccessThunkAction}\r\n                    followSuccessThunkAction={props.followSuccessThunkAction}\r\n                    isFollowingProgress={props.isFollowingProgress}\r\n                />)}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Users;","//         users: state.usersPage.users,\r\n//         pageSize: state.usersPage.pageSize,\r\n//         usersCounts: state.usersPage.usersCounts,\r\n//         currentPage: state.usersPage.currentPage,\r\n//         isFetching: state.usersPage.isFetching,\r\n//         isFollowingProgress: state.usersPage.isFollowingProgress\r\n\r\nimport { createSelector } from \"reselect\"\r\nimport { AppStateType } from \"../../redux/redux-store\"\r\n\r\nexport const getUsers = (state: AppStateType) => {\r\n    return state.usersPage.users\r\n}\r\n\r\nexport const getUsersSelector = createSelector(getUsers, (users) => {\r\n    return users.filter(u => true)\r\n})\r\nexport const getPageSize = (state: AppStateType) => {\r\n    return state.usersPage.pageSize\r\n}\r\nexport const getPortionUsers = (state: AppStateType) => {\r\n    return state.usersPage.portionUsers\r\n}\r\nexport const getUsersCounts = (state: AppStateType) => {\r\n    return state.usersPage.usersCounts\r\n}\r\nexport const getCurrentPage = (state: AppStateType) => {\r\n    return state.usersPage.currentPage\r\n}\r\nexport const getFetching = (state: AppStateType) => {\r\n    return state.usersPage.isFetching\r\n}\r\nexport const getFollowingProgress = (state: AppStateType) => {\r\n    return state.usersPage.isFollowingProgress\r\n}","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { compose } from 'redux';\r\nimport { AppStateType } from '../../redux/redux-store';\r\nimport { getUsersThunkAction, followSuccessThunkAction, unfollowSuccessThunkAction } from '../../redux/users-reducer';\r\nimport { UserType } from '../../types/types';\r\nimport Preloader from '../common/preloader/preloader';\r\nimport Users from './Users';\r\nimport { getCurrentPage, getFetching, getFollowingProgress, getPageSize, getPortionUsers, getUsers, getUsersCounts, getUsersSelector } from './UsersSelectors';\r\n\r\ntype MapStatePropsType = {\r\n    currentPage: number,\r\n    pageSize: number,\r\n    isFetching: boolean,\r\n    usersCounts: number,\r\n    users: Array<UserType>,\r\n    portionUsers: number,\r\n    isFollowingProgress: Array<number>\r\n}\r\ntype MapDispatchPropsType = {\r\n    unfollowSuccessThunkAction: (userId: number) => void,\r\n    followSuccessThunkAction: (userId: number) => void,\r\n    getUsersThunkAction: (currentPage: number, pageSize: number) => void\r\n}\r\ntype OwnPropsType = {\r\n    pageTitle: string\r\n}\r\n\r\n\r\n\r\ntype PropsType = MapStatePropsType & MapDispatchPropsType & OwnPropsType;\r\n\r\nclass UsersContainer extends React.Component<PropsType> {\r\n\r\n    componentDidMount() {\r\n        this.props.getUsersThunkAction(this.props.currentPage, this.props.pageSize)\r\n    }\r\n\r\n    onPageChanged = (pageNumber: number) => {\r\n        this.props.getUsersThunkAction(pageNumber, this.props.pageSize)\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <>\r\n                <h2>{this.props.pageTitle}</h2>\r\n                {this.props.isFetching ? <Preloader /> : null}\r\n                <Users\r\n                    usersCounts={this.props.usersCounts}\r\n                    pageSize={this.props.pageSize}\r\n                    currentPage={this.props.currentPage}\r\n                    onPageChanged={this.onPageChanged}\r\n                    users={this.props.users}\r\n                    // follow={this.props.follow}\r\n                    // unfollow={this.props.unfollow}\r\n                    isFollowingProgress={this.props.isFollowingProgress}\r\n                    // toggleFollowingProgress={this.props.toggleFollowingProgress}\r\n                    unfollowSuccessThunkAction={this.props.unfollowSuccessThunkAction}\r\n                    followSuccessThunkAction={this.props.followSuccessThunkAction}\r\n                    portionUsers={this.props.portionUsers}\r\n                />\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\n// const mapStateToProps = (state) => {\r\n//     return {\r\n//         users: state.usersPage.users,\r\n//         pageSize: state.usersPage.pageSize,\r\n//         usersCounts: state.usersPage.usersCounts,\r\n//         currentPage: state.usersPage.currentPage,\r\n//         isFetching: state.usersPage.isFetching,\r\n//         isFollowingProgress: state.usersPage.isFollowingProgress\r\n//     }\r\n// }\r\n\r\n\r\nconst mapStateToProps = (state: AppStateType): MapStatePropsType => {\r\n    return {\r\n        users: getUsersSelector(state),\r\n        pageSize: getPageSize(state),\r\n        usersCounts: getUsersCounts(state),\r\n        currentPage: getCurrentPage(state),\r\n        isFetching: getFetching(state),\r\n        isFollowingProgress: getFollowingProgress(state),\r\n        portionUsers: getPortionUsers(state)\r\n    }\r\n}\r\n\r\n//TStateProps = {}, TDispatchProps = {}, TOwnProps = {}, State = DefaultState из дженериков\r\nexport default compose(connect<MapStatePropsType, MapDispatchPropsType, OwnPropsType, AppStateType>\r\n    (mapStateToProps,\r\n        {\r\n            // follow,\r\n            // unfollow,\r\n            // toggleFollowingProgress,\r\n            getUsersThunkAction,\r\n            unfollowSuccessThunkAction,\r\n            followSuccessThunkAction\r\n        }))\r\n    (UsersContainer)","import { instance } from \"./requestsAPI\";\r\n\r\nexport type UrlApiResponseType = {\r\n    url: string\r\n}\r\n\r\nexport const UrlApi = {\r\n    getCaptchaUrl() {\r\n        return instance.get<UrlApiResponseType>('security/get-captcha-url')\r\n            .then(response => response.data);\r\n    }\r\n};\r\n","import { instance, APIResponseType, ResultCodeForCaptchaEnum, ResultCodesEnum } from \"./requestsAPI\";\r\n\r\n\r\n\r\ntype MeResponseDataType = {\r\n    id: number,\r\n    email: string,\r\n    login: string\r\n}\r\ntype LoginResponseDataType = {\r\n    userId: number\r\n}\r\ntype LogoutResponseType = {\r\n    data: {},\r\n    resultCode: ResultCodesEnum,\r\n    messages: Array<string>\r\n}\r\n\r\nexport const AuthApi = {\r\n    authMe() {\r\n        return instance.get<APIResponseType<MeResponseDataType>>('auth/me')\r\n            .then(response => response.data);\r\n    },\r\n    login(email: string, password: string, rememberMe: boolean = false, captcha: string | null = null) {\r\n        return instance.post<APIResponseType<LoginResponseDataType, ResultCodesEnum | ResultCodeForCaptchaEnum>>('auth/login', { email, password, rememberMe, captcha });\r\n    },\r\n    logout() {\r\n        return instance.delete<APIResponseType<LogoutResponseType>>('auth/login');\r\n    }\r\n};\r\n","import { ResultCodeForCaptchaEnum, ResultCodesEnum } from \"../components/api/requestsAPI\"\r\nimport { UrlApi } from \"../components/api/UrlApi\";\r\nimport { AuthApi } from \"../components/api/AuthApi\";\r\nimport { FormAction, stopSubmit } from \"redux-form\";\r\nimport { ThunkAction } from \"redux-thunk\";\r\nimport { AppStateType, BaseThunkType, InferActionsTypes } from \"./redux-store\";\r\nimport { Action } from \"redux\";\r\n\r\n\r\nconst initialState = {\r\n    userId: null as number | null,\r\n    email: null as string | null,\r\n    login: null as string | null,\r\n    auth: false,\r\n    url: null as string | null\r\n}\r\nexport type InitialStateType = typeof initialState;\r\n\r\nconst authReducer = (state = initialState, action: ActionsTypes): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'auth/SET_USER_DATA':\r\n            return {\r\n                ...state,\r\n                ...action.data\r\n            }\r\n        case 'auth/SET_CAPTCHA_URL':\r\n            return {\r\n                ...state,\r\n                url: action.url\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\ntype ActionsTypes = InferActionsTypes<typeof actions>;\r\ntype ThunkType = BaseThunkType<ActionsTypes | FormAction>;\r\n\r\n\r\nexport const actions = {\r\n    setUserData: (userId: number | null, email: string | null, login: string | null, auth: boolean) => ({ type: 'auth/SET_USER_DATA', data: { userId, email, login, auth } } as const),\r\n    setCaptchaUrl: (url: string) => ({ type: 'auth/SET_CAPTCHA_URL', url } as const)\r\n}\r\n\r\n\r\nexport const authMeThunkCreator = (): ThunkType => async (dispatch) => {\r\n    const data = await AuthApi.authMe()\r\n\r\n    if (data.resultCode === ResultCodesEnum.Success) {\r\n        const { id, email, login } = data.data\r\n        dispatch(actions.setUserData(id, email, login, true))\r\n    }\r\n}\r\n\r\n\r\nexport const loginMe = (email: string, password: string, rememberMe: boolean, captcha: string): ThunkType => async (dispatch) => {\r\n    const response = await AuthApi.login(email, password, rememberMe, captcha)\r\n    if (response.data.resultCode === ResultCodesEnum.Success) {\r\n        dispatch(authMeThunkCreator())\r\n    } else {\r\n        if (response.data.resultCode === ResultCodeForCaptchaEnum.CaptchaIsRequired) {\r\n            const data = await UrlApi.getCaptchaUrl()\r\n            const url = data.url;\r\n            dispatch(actions.setCaptchaUrl(url));\r\n        }\r\n        let action = stopSubmit('loginForm', { _error: response.data.messages[0] }); //idk\r\n        dispatch(action);\r\n    }\r\n}\r\n\r\nexport const logoutMe = (): ThunkType => async (dispatch) => {\r\n    const response = await AuthApi.logout()\r\n    if (response.data.resultCode === ResultCodesEnum.Success) {\r\n        dispatch(actions.setUserData(null, null, null, false))\r\n    }\r\n}\r\n\r\n\r\nexport default authReducer;","import React from 'react';\r\nimport { NavLink } from 'react-router-dom';\r\nimport s from './Header.module.css'\r\n\r\nexport type MapStatePropsType = {\r\n    auth: boolean,\r\n    email: string | null\r\n}\r\nexport type MapDispatchPropsType = {\r\n    logoutMe: () => void\r\n}\r\n\r\nconst Header: React.FC<MapStatePropsType & MapDispatchPropsType> = (props) => {\r\n    return (\r\n        <header className={s.header}>\r\n            <img src='https://logonoid.com/images/human-rights-logo.png' />\r\n            <div className={s.login}>\r\n                {props.auth\r\n                    ? <div><a href='#'>{props.email}</a> <button onClick={props.logoutMe}>Logout</button> </div>\r\n                    : <NavLink to='/auth'>Login</NavLink>}\r\n            </div>\r\n        </header>\r\n    )\r\n}\r\n\r\nexport default Header;","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Redirect } from 'react-router-dom';\r\nimport { logoutMe } from '../../redux/auth-reducer';\r\nimport { AppStateType } from '../../redux/redux-store';\r\nimport Header, { MapDispatchPropsType, MapStatePropsType } from './Header';\r\n\r\n\r\nclass HeaderContainer extends React.Component<MapStatePropsType & MapDispatchPropsType> {\r\n    render() {\r\n        // if (!this.props.data.isAuth) { <Redirect to='/auth' /> }\r\n        return (\r\n            <Header {...this.props} />\r\n        )\r\n    }\r\n}\r\nconst mapStateToProps = (state: AppStateType) => ({\r\n    auth: state.auth.auth,\r\n    email: state.auth.email\r\n})\r\n\r\nexport default connect<MapStatePropsType, MapDispatchPropsType, {}, AppStateType>(mapStateToProps, { logoutMe })(HeaderContainer);","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Field, InjectedFormProps, reduxForm } from 'redux-form'\r\nimport { maxLength, required } from '../../utils/validators/validators';\r\nimport { Input } from '../common/FormsContriols/FormsControls';\r\nimport { loginMe } from '../../redux/auth-reducer'\r\nimport { Redirect } from 'react-router-dom';\r\nimport style from './Login.module.css'\r\nimport { AppStateType } from '../../redux/redux-store';\r\n\r\n\r\nconst maxLength30 = maxLength(30);\r\ntype LoginFormOwnProps = {\r\n    url: string | null\r\n}\r\nconst LoginForm: React.FC<InjectedFormProps<LoginFormValuesType, LoginFormOwnProps> & LoginFormOwnProps> = ({ handleSubmit, error, url }) => {\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            <div>\r\n                <Field name={'email'} component={Input} placeholder={'Login'} validate={[required, maxLength30]} />\r\n            </div>\r\n            <div>\r\n                <Field name={'password'} component={Input} placeholder={'Password'} validate={[required]} type='password' />\r\n            </div>\r\n            <div>\r\n                <Field name={'rememberMe'} component={Input} type={'checkbox'} /> remember me\r\n            </div>\r\n            {error && <div className={style.summaryError}>\r\n                {error}\r\n            </div>}\r\n            {url && <img src={url} alt='captcha' className={style.captchaImg} />}\r\n            {url && <Field name={'captcha'} component={Input} placeholder={'captcha'} validate={[required]} />}\r\n            <div>\r\n                <button>Login</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nconst ReduxLoginForm = reduxForm<LoginFormValuesType, LoginFormOwnProps>({\r\n    form: 'loginForm'\r\n})(LoginForm)\r\n\r\ntype MapStatePropsType = {\r\n    url: string | null,\r\n    isAuth: boolean\r\n}\r\ntype MapDispatchPropsType = {\r\n    loginMe: (email: string, password: string, rememberMe: boolean, captcha: string) => void\r\n}\r\n\r\ntype PropsType = MapStatePropsType & MapDispatchPropsType\r\ntype LoginFormValuesType = {\r\n    password: string,\r\n    email: string,\r\n    rememberMe: boolean,\r\n    captcha: string\r\n}\r\nconst Login: React.FC<PropsType> = (props) => {\r\n    const onChangeSubmit = (formData: LoginFormValuesType) => {\r\n        props.loginMe(formData.email, formData.password, formData.rememberMe, formData.captcha)\r\n    }\r\n    if (props.isAuth) {\r\n        return <Redirect to='/profile' />\r\n    }\r\n    return (\r\n        <>\r\n            <h1>Login</h1>\r\n            <ReduxLoginForm onSubmit={onChangeSubmit} url={props.url} />\r\n        </>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType): MapStatePropsType => ({\r\n    isAuth: state.auth.auth,\r\n    url: state.auth.url\r\n})\r\n\r\nexport default connect(mapStateToProps, { loginMe })(Login)","import { ThunkAction } from \"redux-thunk\";\r\nimport { authMeThunkCreator } from \"./auth-reducer\"\r\nimport { AppStateType, InferActionsTypes } from \"./redux-store\";\r\n\r\n\r\nconst initialState = {\r\n    inizialized: false,\r\n    globalError: null as string | null\r\n}\r\n\r\nexport type InitialStateType = typeof initialState;\r\n\r\n\r\nconst appReducer = (state = initialState, action: ActionsTypes): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'INIZIALIZED_APP':\r\n            return {\r\n                ...state,\r\n                inizialized: true\r\n            }\r\n        case 'GET_ERROR':\r\n            return {\r\n                ...state,\r\n                globalError: action.error\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\ntype ActionsTypes = InferActionsTypes<typeof actions>;\r\n\r\n\r\nconst actions = {\r\n    inizialize: () => ({ type: 'INIZIALIZED_APP' } as const),\r\n    getError: (error: null | string) => ({ type: 'GET_ERROR', error } as const)\r\n}\r\n\r\n\r\ntype ThunkType = ThunkAction<Promise<void>, AppStateType, unknown, ActionsTypes> // 1. то что возвращается 2. глобальный стейт 3. экстрапараметры 4. тип экшнов\r\n\r\nexport const inizializedApp = () => (dispatch: any) => { // ??????????\r\n    const promise = dispatch(authMeThunkCreator())\r\n    Promise.all([promise])\r\n        .then(() => dispatch(actions.inizialize()))\r\n}\r\n\r\nexport const showGetError = (error: null | string) => (dispatch: any) => { // ????????????\r\n    dispatch(actions.getError(error));\r\n    setTimeout(() => dispatch(actions.getError(null)), 5000);\r\n}\r\n\r\n\r\nexport default appReducer;","type FriendsType = {\r\n    name: string,\r\n    avatar: string\r\n}\r\n\r\nconst initialState = {\r\n    friends: [\r\n        { name: 'Serega', avatar: 'https://tattoo-stickers.ru/34939-thickbox_default/nichosi.jpg' },\r\n        { name: 'Semen', avatar: 'https://tattoo-stickers.ru/34939-thickbox_default/nichosi.jpg' },\r\n        { name: 'Masha', avatar: 'https://tattoo-stickers.ru/34939-thickbox_default/nichosi.jpg' }\r\n    ] as Array<FriendsType>\r\n}\r\ntype initialStateType = typeof initialState;\r\n\r\nconst sidebarReducer = (state = initialState, action: any): initialStateType => {\r\n\r\n    let stateCopy = { ...state }\r\n    return stateCopy;\r\n}\r\nexport default sidebarReducer;","import { applyMiddleware, combineReducers, createStore, compose, Action } from \"redux\";\r\nimport profileReducer from './profile-reducer';\r\nimport dialogsReducer from './dialogs-reducer';\r\nimport sidebarReducer from './sidebar-reducer';\r\nimport usersReducer from \"./users-reducer\";\r\nimport authReducer from \"./auth-reducer\";\r\nimport thunkMiddleWare, { ThunkAction } from 'redux-thunk';\r\nimport { reducer as formReducer } from 'redux-form'\r\nimport appReducer from \"./app-reducer\";\r\n\r\nlet reducers = combineReducers({\r\n    profilePage: profileReducer,\r\n    dialogsPage: dialogsReducer,\r\n    sidebar: sidebarReducer,\r\n    usersPage: usersReducer,\r\n    auth: authReducer,\r\n    form: formReducer,\r\n    app: appReducer\r\n})\r\n\r\ntype PropertiesTypes<T> = T extends { [key: string]: infer U } ? U : never\r\n\r\nexport type InferActionsTypes<T extends { [key: string]: (...params: any[]) => any }> = ReturnType<PropertiesTypes<T>>\r\nexport type BaseThunkType<A extends Action, R = Promise<void>> = ThunkAction<R, AppStateType, unknown, A> // 1. то что возвращается 2. глобальный стейт 3. экстрапараметры 4. тип экшнов\r\n\r\ntype ReducerType = typeof reducers; // state на входе\r\nexport type AppStateType = ReturnType<ReducerType> // state на выходе (позволяет видеть приходящие параметры в state)\r\n\r\n//@ts-ignore\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\n\r\nconst store = createStore(reducers, composeEnhancers(applyMiddleware(thunkMiddleWare)));\r\n\r\n\r\n\r\nexport default store;\r\n\r\n","import React from 'react'\r\n\r\n\r\nfunction withSuspense<WCP>(WrappedComponent: React.ComponentType<WCP>) {\r\n    return (props: WCP) => {\r\n        return (\r\n            <React.Suspense fallback={<div>Loading...</div>}>\r\n                <WrappedComponent {...props} />\r\n            </React.Suspense>\r\n        )\r\n    }\r\n}\r\n\r\nexport default withSuspense;","import React from 'react';\r\nimport { NavLink } from 'react-router-dom';\r\nimport s from './Navbar.module.css';\r\n\r\nconst Navbar: React.FC = (props) => {\r\n    return (\r\n        <nav className={s.nav}>\r\n            <div className={s.item}>\r\n                <NavLink to=\"/profile\" activeClassName={s.active}>Profile</NavLink>\r\n            </div>\r\n            <div className={s.item}>\r\n                <NavLink to=\"/dialogs\" activeClassName={s.active}>Messages</NavLink>\r\n            </div>\r\n            <div className={s.item}>\r\n                <NavLink to=\"/users\" activeClassName={s.active}>Users</NavLink>\r\n            </div>\r\n            <div className={s.item}>\r\n                <NavLink to='/#'>News</NavLink>\r\n            </div>\r\n            <div className={s.item}>\r\n                <NavLink to='/#'>Music</NavLink>\r\n            </div>\r\n            <div className={s.item}>\r\n                <NavLink to='/#'>Settings</NavLink>\r\n            </div>\r\n            <div className={s.item}>\r\n                <NavLink to='#' >Friends</NavLink>\r\n            </div>\r\n        </nav>\r\n    )\r\n}\r\n\r\n\r\n\r\nexport default Navbar;","import React from 'react';\nimport './App.css';\nimport { BrowserRouter, Redirect, Route, Switch } from 'react-router-dom';\n//import ProfileContainer from './components/Profile/ProfileContainer';\n//import DialogsContainer from './components/Dialogs/DialogsContainer';\nimport UsersContainer from './components/Users/UsersContainer';\nimport HeaderContainer from './components/Header/HeaderContainer';\nimport Login from './components/Login/Login';\nimport { connect } from 'react-redux';\nimport { compose } from 'redux';\nimport { inizializedApp, showGetError } from './redux/app-reducer'\nimport Preloader from './components/common/preloader/preloader';\nimport { Provider } from 'react-redux';\nimport store, { AppStateType } from './redux/redux-store';\nimport withSuspense from './components/hoc/withSuspense';\nimport Navbar from './components/Navbar/Navbar';\n\nconst ProfileContainer = React.lazy(() => import('./components/Profile/ProfileContainer'))\nconst DialogsContainer = React.lazy(() => import('./components/Dialogs/DialogsContainer'))\n// const NavbarContainer = React.lazy(() => import('./components/Navbar/NavbarContainer'))\n// const UsersContainer = React.lazy(() => import('./components/Users/UsersContainer'))\n// const Login = React.lazy(() => import('./components/Login/Login'))\n\ntype MapPropsType = ReturnType<typeof mapStateToProps>\ntype DispatchPropsType = {\n  inizializedApp: () => void,\n  showGetError: (message: string) => void\n}\nconst SuspendedProfile = withSuspense(ProfileContainer);\nconst SuspendedDialogs = withSuspense(DialogsContainer);\n\nclass App extends React.Component<MapPropsType & DispatchPropsType> {\n  catchAllUnhandleRejection = (event: PromiseRejectionEvent) => {\n    console.warn(\"Внимание: Необработанная ошибка Promise. Позор вам! Причина: \" + event.reason);\n    this.props.showGetError(event.reason.message)\n  }\n  componentDidMount() {\n    this.props.inizializedApp();\n    window.addEventListener(\"unhandledrejection\", this.catchAllUnhandleRejection);\n  }\n  componentWillUnmount() {\n    window.removeEventListener(\"unhandledrejection\", this.catchAllUnhandleRejection);\n  }\n  render() {\n    if (!this.props.inizialized) return <Preloader />\n    return (\n      <div className='app-wrapper'>\n        <HeaderContainer />\n        <Navbar />\n        <div className='app-wrapper-content'>\n          <Switch>\n            <Route exact path='/' render={() => <Redirect to='/profile' />} />\n            <Route path='/profile/:userId?' render={() => <SuspendedProfile />} />\n            <Route path='/dialogs' render={() => <SuspendedDialogs />} />\n            <Route path='/users' render={() => <UsersContainer pageTitle='Самураи' />} />\n            <Route path='/auth' render={() => <Login />} />\n            <Route path='/*' render={() => <div>404 NOT FOUND</div>} />\n          </Switch>\n        </div>\n      </div>\n    )\n  }\n}\nconst mapStateToProps = (state: AppStateType) => ({\n  inizialized: state.app.inizialized,\n  globalError: state.app.globalError\n})\nconst AppContainer = compose<React.ComponentType>(\n  connect(mapStateToProps, { inizializedApp, showGetError }))(App);\n\nconst SamuraiJSApp: React.FC = () => {\n  return <BrowserRouter basename={process.env.PUBLIC_URL}>\n    <Provider store={store}>\n      <AppContainer />\n    </Provider>\n  </BrowserRouter>\n}\nexport default SamuraiJSApp;","import reportWebVitals from './reportWebVitals';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport SamuraiJSApp from './App';\n\n\nReactDOM.render(\n    <SamuraiJSApp />\n    , document.getElementById('root'));\n\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","import React from 'react';\r\nimport { WrappedFieldMetaProps, WrappedFieldProps } from 'redux-form';\r\nimport style from './FormsControls.module.css'\r\n\r\n\r\ntype FormControlParamsType = {\r\n    // meta: {\r\n    //     touched: boolean,\r\n    //     error: string\r\n    // }\r\n    meta: WrappedFieldMetaProps,\r\n    input: string\r\n}\r\n\r\ntype FormControlPropsType = (params: FormControlParamsType) => React.ReactNode;\r\n\r\nconst FormControl = (Element: any): FormControlPropsType => (props) => {\r\n    const formError = props.meta.touched && props.meta.error\r\n    return (\r\n        <div className={style.formControl + ' ' + (formError ? style.error : '')}>\r\n            <div>\r\n                <Element {...props.input} {...props} />\r\n            </div>\r\n            {formError && <span>{props.meta.error}</span>}\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\n\r\nexport const Textarea = FormControl('textarea');\r\n\r\nexport const Input = FormControl('input');\r\n\r\n\r\n\r\n","export type FieldValidatorType = (value: string) => string | undefined\r\n\r\nexport const required: FieldValidatorType = (value) => {\r\n    if (value) return undefined;\r\n    return 'this field is required'\r\n}\r\nexport const maxLength = (countSymbols: number): FieldValidatorType => (value) => {\r\n    if (value.length > countSymbols) {\r\n        return `this field consists more then ${countSymbols} symbols`\r\n    }\r\n    return undefined\r\n}","export default __webpack_public_path__ + \"static/media/preloader.af2ae354.svg\";","import React from 'react';\r\nimport preloader from '../../../assets/img/preloader.svg'\r\n\r\nconst Preloader: React.FC = () => {\r\n    return (\r\n        <div style={{ width: '400px' }}>\r\n            <img src={preloader} alt='preloader' />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Preloader;","// extracted by mini-css-extract-plugin\nmodule.exports = {\"selectedPage\":\"Pagginator_selectedPage__1HJkp\",\"page\":\"Pagginator_page__1Rgo8\",\"pagginator\":\"Pagginator_pagginator__36OQg\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__12PQl\",\"login\":\"Header_login__1JKkX\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"FormsControls_formControl__3h0_a\",\"error\":\"FormsControls_error__3Ho4e\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"summaryError\":\"Login_summaryError__1_Nyg\",\"captchaImg\":\"Login_captchaImg__20HTP\"};","import { PhotosType, ProfileType } from \"../../types/types\";\r\nimport { instance, APIResponseType, ResultCodesEnum } from \"./requestsAPI\";\r\n\r\ntype SetPhotoResponseType = {\r\n    photos: PhotosType\r\n}\r\nexport const ProfileApi = {\r\n    getProfile(id: number | null) {\r\n        return instance.get<ProfileType>(`profile/${id}`)\r\n            .then(response => response.data);\r\n    },\r\n    getStatus(userId: number) {\r\n        return instance.get<string>(`/profile/status/${userId}`)\r\n            .then(response => response.data);\r\n    },\r\n    setStatus(status: string) {\r\n        return instance.put<APIResponseType>('/profile/status', { status: status })\r\n            .then(response => response.data);\r\n    },\r\n    setPhoto(file: any) {\r\n        const formData = new FormData();\r\n        formData.append('image', file);\r\n        return instance.put<APIResponseType<SetPhotoResponseType>>('/profile/photo', formData, {\r\n            headers: {\r\n                'Content-Type': 'multipart/form-data'\r\n            }\r\n        })\r\n            .then(response => response.data);\r\n    },\r\n    setUserData(form: ProfileType) {\r\n        return instance.put<APIResponseType>('profile', form)\r\n            .then(response => response.data);\r\n    }\r\n};\r\n","import { PostType, ProfileType, PhotosType } from './../types/types';\r\nimport { FormAction, stopSubmit } from \"redux-form\";\r\nimport { ProfileApi } from \"../components/api/ProfileApi\";\r\nimport { ThunkAction } from 'redux-thunk';\r\nimport { AppStateType, BaseThunkType, InferActionsTypes } from './redux-store';\r\nimport { Dispatch } from 'react';\r\n\r\n\r\n\r\n\r\nconst initialState = {\r\n    PostData: [\r\n        { id: 1, message: 'Hi, how are you?', likesCount: '12 likes' },\r\n        { id: 2, message: 'It\\'s my first post', likesCount: '0 likes' },\r\n        { id: 3, message: 'Blabla', likesCount: '0 likes' },\r\n        { id: 4, message: 'Blabla', likesCount: '0 likes' }\r\n    ] as Array<PostType>,\r\n    userProfile: null as ProfileType | null,\r\n    status: ''\r\n}\r\nexport type initialStateType = typeof initialState;\r\n\r\nconst profileReducer = (state = initialState, action: ActionTypes): initialStateType => {\r\n    switch (action.type) {\r\n        case 'profile/ADD_POST': {\r\n            const newPost = {\r\n                id: 5,\r\n                message: action.newMessagePost,\r\n                likesCount: '0 likes'\r\n            }\r\n            let stateCopy = {\r\n                ...state,\r\n                PostData: [...state.PostData, newPost],\r\n            };\r\n            return stateCopy;\r\n        };\r\n        case 'profile/SET_USER_PROFILE':\r\n            return {\r\n                ...state,\r\n                userProfile: action.profile\r\n            };\r\n        case 'profile/SET_USER_STATUS':\r\n            return {\r\n                ...state,\r\n                status: action.status\r\n            };\r\n        case 'profile/DELETE_POST':\r\n            return {\r\n                ...state,\r\n                PostData: [...state.PostData].filter(p => p.id !== action.postId)\r\n            }\r\n        case 'profile/SET_PHOTO':\r\n            return {\r\n                ...state,\r\n                userProfile: { ...state.userProfile, photos: action.file } as ProfileType\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\ntype ActionTypes = InferActionsTypes<typeof actions>;\r\n\r\nexport const actions = {\r\n    addPostActionCreator: (newMessagePost: string) => {\r\n        return {\r\n            type: 'profile/ADD_POST',\r\n            newMessagePost\r\n        } as const\r\n    },\r\n    setUserProfile: (profile: ProfileType) => {\r\n        return {\r\n            type: 'profile/SET_USER_PROFILE',\r\n            profile\r\n        } as const\r\n    },\r\n    setStatus: (status: string) => {\r\n        return {\r\n            type: 'profile/SET_USER_STATUS',\r\n            status\r\n        } as const\r\n    },\r\n    deletePost: (postId: number) => {\r\n        return {\r\n            type: 'profile/DELETE_POST',\r\n            postId\r\n        } as const\r\n    },\r\n    setPhotoSuccess: (file: PhotosType) => {\r\n        return {\r\n            type: 'profile/SET_PHOTO',\r\n            file\r\n        } as const\r\n    }\r\n}\r\n\r\n\r\ntype ThunkType = BaseThunkType<ActionTypes | FormAction> // 1. то что возвращается 2. глобальный стейт 3. экстрапараметры 4. тип экшнов\r\n\r\n\r\n\r\nexport const userProfileThunkCreator = (userId: number | null): ThunkType => {\r\n    return async (dispatch) => {\r\n        const data = await ProfileApi.getProfile(userId)\r\n        dispatch(actions.setUserProfile(data));\r\n    }\r\n}\r\nexport const getUserStatus = (userId: number): ThunkType => async (dispatch) => {\r\n    const data = await ProfileApi.getStatus(userId)\r\n    dispatch(actions.setStatus(data));\r\n}\r\n\r\nexport const updateStatus = (status: string): ThunkType => async (dispatch) => {\r\n    try {\r\n        const data = await ProfileApi.setStatus(status)\r\n        if (data.resultCode === 0) {\r\n            dispatch(actions.setStatus(status))\r\n        }\r\n    } catch (error: any) { // idk\r\n        alert(error.response.status)\r\n    }\r\n}\r\nexport const uploadPhoto = (file: PhotosType): ThunkType => async (dispatch) => {\r\n    const data = await ProfileApi.setPhoto(file)\r\n    if (data.resultCode === 0) {\r\n        dispatch(actions.setPhotoSuccess(data.data.photos))\r\n    }\r\n}\r\nexport const saveForm = (formData: ProfileType): ThunkType => async (dispatch, getState) => {\r\n    const data = await ProfileApi.setUserData(formData);\r\n    const userId = getState().auth.userId;\r\n    if (data.resultCode === 0) {\r\n        dispatch(userProfileThunkCreator(userId));\r\n    } else {\r\n        let action = stopSubmit('profileDataForm', { _error: data.messages[0] }); // idk\r\n        dispatch(action);\r\n        return Promise.reject(data.messages[0]);\r\n    }\r\n}\r\n\r\nexport default profileReducer;"],"sourceRoot":""}