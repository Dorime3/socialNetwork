{"version":3,"sources":["components/Profile/ProfileInfo/ProfileInfo.module.css","components/Profile/MyPosts/MyPosts.module.css","components/Profile/MyPosts/Post/Post.module.css","components/Profile/ProfileInfo/ProfileStatusWithHooks.tsx","components/Profile/ProfileInfo/ProfileData.tsx","components/Profile/ProfileInfo/ProfileDataForm.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","components/Profile/MyPosts/Post/Post.tsx","components/Profile/MyPosts/MyPosts.tsx","components/Profile/MyPosts/MyPostsContainer.tsx","components/Profile/Profile.tsx","components/Profile/ProfileContainer.tsx"],"names":["module","exports","ProfileStatusWithHooks","props","useState","editMode","setEditMode","status","setStatus","useEffect","onDoubleClick","onChange","e","currentTarget","value","onBlur","updateStatus","autoFocus","Contact","title","className","s","profileContacts","ProfileData","profile","isOwner","toEditMode","profileData","onClick","fullName","lookingForAJob","lookingForAJobDescription","aboutMe","Object","keys","contacts","map","el","FormContact","Field","name","component","Input","placeholder","ReduxProfileDataForm","reduxForm","form","onSubmit","handleSubmit","error","summaryError","type","Textarea","ProfileInfo","avatar","alt","src","photos","large","defaultPicture","target","files","length","uploadPhoto","globalError","initialValues","formData","saveForm","then","Post","item","message","likesCount","deletePostMessage","id","maxLength30","maxLength","MyPostsFormRedux","validate","required","MyPosts","deletePost","posts","reverse","postBlock","addPostActionCreator","addPost","actions","MyPostsContainer","connect","state","profilePage","PostData","Profile","ProfileContainer","this","match","authorizedUserId","history","userProfileThunkCreator","getUserStatus","userId","params","push","getProfile","prevProps","React","Component","compose","userProfile","auth","app","withRouter"],"mappings":"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","file":"static/js/3.c02ac1ba.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"avatar\":\"ProfileInfo_avatar__2Yk7L\",\"head\":\"ProfileInfo_head__9WxNB\",\"profileData\":\"ProfileInfo_profileData__3gtxR\",\"profileContacts\":\"ProfileInfo_profileContacts__3EpLK\",\"summaryError\":\"ProfileInfo_summaryError__3qACz\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"posts\":\"MyPosts_posts__3bWYx\",\"postBlock\":\"MyPosts_postBlock__1oFRX\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post_item__A0k-V\"};","import React, { useState, useEffect, ChangeEventHandler, ChangeEvent } from 'react'\r\n\r\ntype PropsType = {\r\n    status: string,\r\n    updateStatus: (status: string) => void\r\n}\r\n\r\nexport const ProfileStatusWithHooks: React.FC<PropsType> = (props) => {\r\n    const [editMode, setEditMode] = useState(false)\r\n    const [status, setStatus] = useState(props.status)\r\n    useEffect(() => {\r\n        setStatus(props.status)\r\n    }, [!props.status]);\r\n\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true)\r\n    }\r\n    const deActivateEditMode = () => {\r\n        setEditMode(false)\r\n        props.updateStatus(status)\r\n    }\r\n    const onStatusChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setStatus(e.currentTarget.value)\r\n    }\r\n    return (\r\n        <>\r\n            {!editMode &&\r\n                <div>\r\n                    <span onDoubleClick={activateEditMode}>{status || 'Что нового?'}</span>\r\n                </div>}\r\n            {editMode &&\r\n                <div>\r\n                    <input onChange={onStatusChange} onBlur={deActivateEditMode} autoFocus={true} value={status} />\r\n                </div>}\r\n        </>\r\n    )\r\n}","import React from 'react';\r\nimport { ContactsType, ProfileType } from '../../../types/types';\r\nimport s from './ProfileInfo.module.css'\r\n\r\ntype PropsType = {\r\n    profile: ProfileType,\r\n    isOwner: boolean,\r\n    toEditMode: () => void\r\n\r\n}\r\n\r\nconst ProfileData: React.FC<PropsType> = ({ profile, isOwner, toEditMode }) => {\r\n    return (\r\n        <div className={s.profileData}>\r\n            {isOwner && <button onClick={toEditMode}>edit</button>}\r\n            <div>\r\n                <b>Full name:</b> {profile.fullName}\r\n            </div>\r\n            <div>\r\n                <b>Looking for a job:</b> {profile.lookingForAJob ? 'yea' : 'no'}\r\n            </div>\r\n            {profile.lookingForAJob &&\r\n                <div>\r\n                    <b>My professional skills:</b>\r\n                    {profile.lookingForAJobDescription}\r\n                </div>}\r\n            <div>\r\n                <b>About me:</b> {profile.aboutMe}\r\n            </div>\r\n            <div>\r\n                <b>Contacts:</b> {\r\n                    Object\r\n                        .keys(profile.contacts)\r\n                        .map((el) => {\r\n                            return <Contact key={el} title={el} value={profile.contacts[el as keyof ContactsType]} />\r\n                        })}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\ntype ContactsPropsType = {\r\n    title: string,\r\n    value: string\r\n}\r\n\r\nconst Contact: React.FC<ContactsPropsType> = ({ title, value }) => {\r\n    return (\r\n        <div className={s.profileContacts}>\r\n            <b>{title}:</b> {value}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ProfileData;","import React from 'react';\r\nimport { Field, InjectedFormProps, reduxForm } from 'redux-form';\r\nimport { ContactsType, ProfileType } from '../../../types/types';\r\nimport { Input, Textarea } from '../../common/FormsContriols/FormsControls';\r\nimport s from './ProfileInfo.module.css'\r\n\r\ntype PropsType = {\r\n    profile: ProfileType\r\n    isOwner: boolean\r\n}\r\n\r\n\r\nconst ProfileDataForm: React.FC<InjectedFormProps<ProfileType, PropsType> & PropsType> = (props) => {\r\n    return (\r\n        <form className={s.profileData} onSubmit={props.handleSubmit}>\r\n            <div><button>save</button></div>\r\n            {props.error && <div className={s.summaryError}>{props.error}</div>}\r\n            <div>\r\n                <b>Full name:</b>\r\n                <Field name={'fullName'} component={Input} placeholder={'enter your name'} />\r\n            </div>\r\n            <div>\r\n                <b>Are you look for a job?</b>\r\n                <Field name={'lookingForAJob'} component={Input} type={'checkbox'} />\r\n            </div>\r\n            <div>\r\n                <b>My professional skills:</b>\r\n                <Field name={'lookingForAJobDescription'} component={Textarea} placeholder={'Describe your professional skills'} />\r\n            </div>\r\n            <div>\r\n                <b>About me:</b>\r\n                <Field name={'aboutMe'} component={Textarea} placeholder={'About me'} />\r\n            </div>\r\n            <div>\r\n                <b>Contacts:</b>\r\n                {Object.keys(props.profile.contacts).map(el => {\r\n                    return <FormContact key={el} title={el} />\r\n                })}\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\ntype FormContactsPropsType = {\r\n    title: string\r\n}\r\n\r\n\r\nconst FormContact = (props: FormContactsPropsType) => {\r\n    return (\r\n        <div className={s.profileContacts}>\r\n            <b>{props.title}</b>\r\n            <Field name={'contacts.' + props.title} component={Input} placeholder={props.title} />\r\n        </div>\r\n    )\r\n}\r\n\r\nconst ReduxProfileDataForm = reduxForm<ProfileType, PropsType>({\r\n    form: 'profileDataForm'\r\n})(ProfileDataForm)\r\n\r\n\r\n\r\nexport default ReduxProfileDataForm;","import React, { ChangeEvent, useState } from 'react';\r\nimport s from './ProfileInfo.module.css'\r\nimport defaultPicture from '../../../assets/img/user.png'\r\nimport ProfileStatus from './ProfileStatus'\r\nimport { ProfileStatusWithHooks } from './ProfileStatusWithHooks';\r\nimport ProfileData from './ProfileData';\r\nimport ReduxProfileDataForm from './ProfileDataForm';\r\nimport { ProfileType } from '../../../types/types';\r\n\r\ntype PropsType = {\r\n    profile: ProfileType,\r\n    status: string,\r\n    updateStatus: (status: string) => void,\r\n    isOwner: boolean,\r\n    globalError: string | null,\r\n    uploadPhoto: (file: File) => void,\r\n    saveForm: (formData: ProfileType) => Promise<any>\r\n}\r\n\r\nconst ProfileInfo: React.FC<PropsType> = (props) => {\r\n    const onUploadPhoto = (e: ChangeEvent<HTMLInputElement>) => {\r\n        if (e.target.files?.length) {\r\n            props.uploadPhoto(e.target.files[0])\r\n        }\r\n    }\r\n    const [editMode, setEditMode] = useState(false)\r\n    const toEditMode = () => {\r\n        setEditMode(true);\r\n    }\r\n\r\n    const onSubmit = (formData: ProfileType) => {\r\n        // todo: remove then\r\n        props.saveForm(formData).then(() => {\r\n            setEditMode(false);\r\n        })\r\n    }\r\n    return (\r\n        <div>\r\n            {/* <div className={s.head}>\r\n            </div> */}\r\n            <div className={s.avatar}>\r\n                <img alt='avatar' src={props.profile.photos.large ? props.profile.photos.large : defaultPicture} />\r\n                {props.isOwner && <input type='file' onChange={onUploadPhoto} />}\r\n                <ProfileStatusWithHooks status={props.status} updateStatus={props.updateStatus} />\r\n                {props.globalError && <div>{props.globalError}</div>}\r\n            </div>\r\n            {editMode\r\n                ? <ReduxProfileDataForm initialValues={props.profile} onSubmit={onSubmit} profile={props.profile} isOwner={props.isOwner} />\r\n                : <ProfileData profile={props.profile} isOwner={props.isOwner} toEditMode={toEditMode} />\r\n            }\r\n        </div >\r\n    )\r\n}\r\n\r\n\r\n\r\nexport default ProfileInfo;","import React from 'react';\r\nimport { PostType } from '../../../../types/types';\r\nimport s from './Post.module.css'\r\n\r\ntype MapStatePropsType = {\r\n    message: string,\r\n    likesCount: string,\r\n    id: number\r\n}\r\n\r\ntype MapDispatchPropsType = {\r\n    deletePostMessage: (id: number) => void\r\n}\r\n\r\nconst Post: React.FC<MapStatePropsType & MapDispatchPropsType> = (props) => {\r\n    return (\r\n        <div className={s.item}>\r\n            <img src='https://i.pinimg.com/originals/a0/a9/77/a0a977805b7adf3522f790b703558afa.jpg' />\r\n            {props.message}\r\n            <div>\r\n                <span>{props.likesCount}</span>\r\n            </div>\r\n            <button onClick={() => props.deletePostMessage(props.id)}>delete this</button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Post;","import React from 'react';\r\nimport s from './MyPosts.module.css'\r\nimport { Field, InjectedFormProps, reduxForm } from 'redux-form'\r\nimport { maxLength, required } from '../../../utils/validators/validators';\r\nimport { Textarea } from '../../common/FormsContriols/FormsControls';\r\nimport Post from './Post/Post';\r\nimport { PostType } from '../../../types/types';\r\n\r\nconst maxLength30 = maxLength(30)\r\n\r\nexport type AddPostFormValuesType = {\r\n    addPost: string\r\n}\r\ntype PropsType = MapStatePropsType & MapDispatchPropsType;\r\n\r\nexport type MapStatePropsType = {\r\n    posts: Array<PostType>\r\n}\r\nexport type MapDispatchPropsType = {\r\n    addPostActionCreator: (addPost: string) => void\r\n    deletePost: (id: number) => void\r\n}\r\n\r\nconst MyPosts: React.FC<PropsType> = (props) => {\r\n    const onSubmitForm = (formData: AddPostFormValuesType) => {\r\n        props.addPostActionCreator(formData.addPost)\r\n    }\r\n    const deletePostMessage = (id: number) => {\r\n        props.deletePost(id)\r\n    }\r\n    const posts = props.posts.reverse().map(el => (\r\n        <Post key={el.id} id={el.id} message={el.message} likesCount={el.likesCount} deletePostMessage={deletePostMessage} />\r\n    ))\r\n    return (\r\n        <div className={s.postBlock}>\r\n            <h3>MyPosts</h3>\r\n            <MyPostsFormRedux onSubmit={onSubmitForm} />\r\n            <div className={s.posts}>\r\n                {posts}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n\r\n\r\n\r\nconst MyPostsForm: React.FC<InjectedFormProps<AddPostFormValuesType, {}> & {}> = (props) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                <Field name={'addPost'}\r\n                    component={Textarea}\r\n                    placeholder='Введите сообщение'\r\n                    validate={[required, maxLength30]} />\r\n            </div>\r\n            <button >Add post</button>\r\n        </form >\r\n    )\r\n}\r\n\r\nconst MyPostsFormRedux = reduxForm<AddPostFormValuesType>({ form: 'addProfilePost' })(MyPostsForm)\r\nexport default MyPosts;","import React from 'react';\r\nimport { actions } from '../../../redux/profile-reducer';\r\nimport MyPosts, { MapDispatchPropsType, MapStatePropsType } from './MyPosts';\r\nimport { connect } from 'react-redux';\r\nimport { AppStateType } from '../../../redux/redux-store';\r\n\r\n\r\nconst mapStateToProps = (state: AppStateType) => {\r\n    return {\r\n        posts: state.profilePage.PostData\r\n    } as MapStatePropsType\r\n}\r\n\r\n// const mapDispatchToProps = (dispatch) => {\r\n//     return {\r\n//         newPost: (newMessagePost) => {\r\n//             dispatch(addPostActionCreator(newMessagePost));\r\n//         }\r\n//     }\r\n// }\r\nconst { addPostActionCreator, deletePost } = actions;\r\nconst MyPostsContainer = connect<MapStatePropsType, MapDispatchPropsType, {}, AppStateType>(mapStateToProps, { addPostActionCreator, deletePost })(MyPosts);\r\n\r\n\r\nexport default MyPostsContainer;","import React from 'react';\r\nimport ProfileInfo from './ProfileInfo/ProfileInfo'\r\nimport s from './Profile.module.css'\r\nimport MyPostsContainer from './MyPosts/MyPostsContainer';\r\nimport Preloader from '../common/preloader/preloader';\r\nimport { PhotosType, ProfileType } from '../../types/types';\r\n\r\ntype PropsType = {\r\n  profile: ProfileType | null,\r\n  status: string,\r\n  globalError: string | null\r\n  updateStatus: (status: string) => void,\r\n  isOwner: number | null,//???\r\n  uploadPhoto: (file: File) => void,\r\n  saveForm: (FormData: ProfileType) => Promise<any>\r\n}\r\n\r\nconst Profile: React.FC<PropsType> = (props) => {\r\n  if (!props.profile) {\r\n    return (<Preloader />)\r\n  }\r\n  return (\r\n    <div>\r\n      <ProfileInfo\r\n        profile={props.profile}\r\n        status={props.status}\r\n        globalError={props.globalError}\r\n        updateStatus={props.updateStatus}\r\n        isOwner={!props.isOwner}\r\n        uploadPhoto={props.uploadPhoto}\r\n        saveForm={props.saveForm} />\r\n      <MyPostsContainer />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Profile;","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport Profile from './Profile';\r\nimport { userProfileThunkCreator, getUserStatus, updateStatus, uploadPhoto, saveForm } from '../../redux/profile-reducer'\r\nimport { withRouter, RouteComponentProps } from 'react-router-dom';\r\nimport { compose } from 'redux';\r\nimport { AppStateType } from '../../redux/redux-store';\r\nimport { PhotosType, ProfileType } from '../../types/types';\r\n\r\nconst mapStateToProps = (state: AppStateType) => ({\r\n    profile: state.profilePage.userProfile,\r\n    status: state.profilePage.status,\r\n    authorizedUserId: state.auth.userId,\r\n    globalError: state.app.globalError\r\n})\r\n\r\ntype MapStatePropsType = ReturnType<typeof mapStateToProps>\r\n// type MapStatePropsType = {\r\n//     profile: ProfileType | null,\r\n//     authorizedUserId: number | null,\r\n//     status: string | null,\r\n//     globalError: string | null\r\n// }\r\ntype MapDispatchPropsType = {\r\n    userProfileThunkCreator: (userId: number | null) => void,\r\n    getUserStatus: (userId: number | null) => void,\r\n    updateStatus: (status: string) => void,\r\n    uploadPhoto: (file: File) => void,\r\n    saveForm: (formData: ProfileType) => Promise<any>\r\n}\r\ntype PathParamsType = {\r\n    userId: string\r\n}\r\n\r\ntype PropsType = MapStatePropsType & MapDispatchPropsType & RouteComponentProps<PathParamsType>\r\n// type PropsType = RouteComponentProps & MapStatePropsType & MapDispatchPropsType & OwnPropsType;\r\n\r\nclass ProfileContainer extends React.Component<PropsType> {\r\n    getProfile() {\r\n        const { match, authorizedUserId, history, userProfileThunkCreator, getUserStatus } = this.props\r\n\r\n        let userId: number | null = +match.params.userId;\r\n        if (!userId) {\r\n            userId = authorizedUserId\r\n            if (!userId) {\r\n                history.push('/auth')\r\n            }\r\n        }\r\n        userProfileThunkCreator(userId);\r\n        getUserStatus(userId)\r\n    }\r\n    componentDidMount() {\r\n        this.getProfile();\r\n    }\r\n    componentDidUpdate(prevProps: PropsType) {\r\n        if (this.props.match.params.userId !== prevProps.match.params.userId) {\r\n            this.getProfile();\r\n        }\r\n    }\r\n    render() {\r\n\r\n        return (\r\n            <Profile\r\n                profile={this.props.profile}\r\n                status={this.props.status}\r\n                globalError={this.props.globalError}\r\n                updateStatus={this.props.updateStatus}\r\n                isOwner={+this.props.match.params.userId}\r\n                uploadPhoto={this.props.uploadPhoto}\r\n                saveForm={this.props.saveForm}\r\n            />\r\n        )\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\nexport default compose<React.ComponentType>(\r\n    connect(mapStateToProps, { userProfileThunkCreator, getUserStatus, updateStatus, uploadPhoto, saveForm }),\r\n    withRouter)\r\n    (ProfileContainer)"],"sourceRoot":""}