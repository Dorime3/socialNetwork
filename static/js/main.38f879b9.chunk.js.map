{"version":3,"sources":["assets/img/preloader.svg","components/common/preloader/preloader.tsx","components/common/pagginator/Pagginator.module.css","components/common/FormsContriols/FormsControls.module.css","components/Login/Login.module.css","components/api/ProfileApi.ts","redux/profile-reducer.ts","assets/img/user.png","redux/dialogs-reducer.ts","components/Users/Users.module.css","components/api/requestsAPI.ts","reportWebVitals.js","components/Users/User.tsx","components/common/pagginator/Pagginator.tsx","components/Users/UsersSelectors.ts","components/Users/usersSearchForm.tsx","components/api/UsersApi.ts","redux/users-reducer.ts","components/Users/Users.tsx","components/Users/UsersContainer.tsx","components/api/UrlApi.ts","components/api/AuthApi.ts","redux/auth-reducer.ts","components/Login/Login.tsx","redux/app-reducer.ts","redux/sidebar-reducer.ts","redux/redux-store.ts","components/hoc/withSuspense.tsx","components/Header/AuthSelectors.ts","components/Header/Header.tsx","App.tsx","index.tsx","components/common/FormsContriols/FormsControls.tsx","utils/validators/validators.ts"],"names":["Preloader","style","width","src","preloader","alt","module","exports","ProfileApi","id","instance","get","then","response","data","userId","status","put","file","formData","FormData","append","headers","form","initialState","PostData","message","likesCount","userProfile","actions","addPostActionCreator","newMessagePost","type","setUserProfile","profile","setStatus","deletePost","postId","setPhotoSuccess","userProfileThunkCreator","dispatch","a","getUserStatus","updateStatus","resultCode","alert","uploadPhoto","photos","saveForm","getState","auth","action","stopSubmit","_error","messages","Promise","reject","profileReducer","state","newPost","stateCopy","filter","p","MessageData","DialogData","name","img","addMessage","messageBody","dialogsReducer","messagePost","ResultCodesEnum","ResultCodeForCaptchaEnum","axios","create","baseURL","withCredentials","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","User","props","user","unfollow","follow","isFollowingProgress","className","s","person","to","small","userPhoto","followed","disabled","some","el","onClick","Pagginator","pagesCount","Math","ceil","usersCounts","pageSize","useState","portionNumber","setPortionNumber","leftPortionNumber","portionUsers","rightPortionNumber","pages","i","push","pagginator","map","onPageChanged","cn","page","selectedPage","currentPage","getUsersSelector","createSelector","usersPage","users","u","getPageSize","getPortionUsers","getUsersCounts","getCurrentPage","getFetching","isFetching","getFollowingProgress","getUsersFilter","usersSearchFormValidate","values","UserSearchForm","React","memo","useSelector","enableReinitialize","initialValues","term","friend","String","validate","onSubmit","setSubmitting","onFilterChanged","isSubmitting","as","value","UsersApi","delete","post","usersNumber","payload","getUsersThunkAction","items","totalCount","followUnfollowFlow","apiMethod","actionCreator","usersReducer","Users","useDispatch","history","useHistory","useEffect","search","location","params","URLSearchParams","actualPage","actualFilter","Number","pathname","followSuccessThunkAction","unfollowSuccessThunkAction","pageNumber","UsersPage","pageTitle","UrlApi","AuthApi","email","password","rememberMe","captcha","login","url","authMeThunkCreator","Success","authReducer","maxLength30","maxLength","ReduxLoginForm","reduxForm","handleSubmit","error","Field","component","Input","placeholder","required","summaryError","captchaImg","Login","isAuth","CaptchaIsRequired","inizialized","globalError","appReducer","friends","avatar","sidebarReducer","reducers","combineReducers","profilePage","dialogsPage","sidebar","formReducer","app","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunkMiddleWare","withSuspense","WrappedComponent","Suspense","fallback","selectIsAuth","selectCurrentUserLogin","AppHeader","Header","Layout","span","theme","mode","defaultSelectedKeys","Item","backgroundColor","icon","UserOutlined","ProfileContainer","lazy","DialogsContainer","SuspendedProfile","SuspendedDialogs","App","catchAllUnhandleRejection","event","console","warn","reason","showGetError","this","inizializedApp","addEventListener","removeEventListener","SubMenu","Menu","Content","Footer","Sider","padding","margin","height","title","LaptopOutlined","NotificationOutlined","minHeight","exact","path","render","textAlign","Component","AppContainer","connect","promise","all","setTimeout","SamuraiJSApp","basename","process","ReactDOM","document","getElementById","FormControl","Element","formError","meta","touched","formControl","input","Textarea","countSymbols","length"],"mappings":"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","file":"static/js/main.38f879b9.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/preloader.af2ae354.svg\";","import React from 'react';\r\nimport preloader from '../../../assets/img/preloader.svg'\r\n\r\nconst Preloader: React.FC = () => {\r\n    return (\r\n        <div style={{ width: '400px' }}>\r\n            <img src={preloader} alt='preloader' />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Preloader;","// extracted by mini-css-extract-plugin\nmodule.exports = {\"selectedPage\":\"Pagginator_selectedPage__1HJkp\",\"page\":\"Pagginator_page__1Rgo8\",\"pagginator\":\"Pagginator_pagginator__36OQg\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"FormsControls_formControl__3h0_a\",\"error\":\"FormsControls_error__3Ho4e\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"summaryError\":\"Login_summaryError__1_Nyg\",\"captchaImg\":\"Login_captchaImg__20HTP\"};","import { PhotosType, ProfileType } from \"../../types/types\";\r\nimport { instance, APIResponseType, ResultCodesEnum } from \"./requestsAPI\";\r\n\r\ntype SetPhotoResponseType = {\r\n    photos: PhotosType\r\n}\r\nexport const ProfileApi = {\r\n    getProfile(id: number | null) {\r\n        return instance.get<ProfileType>(`profile/${id}`)\r\n            .then(response => response.data);\r\n    },\r\n    getStatus(userId: number | null) {\r\n        return instance.get<string>(`/profile/status/${userId}`)\r\n            .then(response => response.data);\r\n    },\r\n    setStatus(status: string) {\r\n        return instance.put<APIResponseType>('/profile/status', { status: status })\r\n            .then(response => response.data);\r\n    },\r\n    setPhoto(file: any) {\r\n        const formData = new FormData();\r\n        formData.append('image', file);\r\n        return instance.put<APIResponseType<SetPhotoResponseType>>('/profile/photo', formData, {\r\n            headers: {\r\n                'Content-Type': 'multipart/form-data'\r\n            }\r\n        })\r\n            .then(response => response.data);\r\n    },\r\n    setUserData(form: ProfileType) {\r\n        return instance.put<APIResponseType>('profile', form)\r\n            .then(response => response.data);\r\n    }\r\n};\r\n","import { PostType, ProfileType, PhotosType } from './../types/types';\r\nimport { FormAction, stopSubmit } from \"redux-form\";\r\nimport { ProfileApi } from \"../components/api/ProfileApi\";\r\nimport { ThunkAction } from 'redux-thunk';\r\nimport { AppStateType, BaseThunkType, InferActionsTypes } from './redux-store';\r\nimport { Dispatch } from 'react';\r\n\r\n\r\n\r\n\r\nconst initialState = {\r\n    PostData: [\r\n        { id: 1, message: 'Hi, how are you?', likesCount: '12 likes' },\r\n        { id: 2, message: 'It\\'s my first post', likesCount: '0 likes' },\r\n        { id: 3, message: 'Blabla', likesCount: '0 likes' },\r\n        { id: 4, message: 'Blabla', likesCount: '0 likes' }\r\n    ] as Array<PostType>,\r\n    userProfile: null as ProfileType | null,\r\n    status: ''\r\n}\r\nexport type initialStateType = typeof initialState;\r\n\r\nconst profileReducer = (state = initialState, action: ActionTypes): initialStateType => {\r\n    switch (action.type) {\r\n        case 'profile/ADD_POST': {\r\n            const newPost = {\r\n                id: 5,\r\n                message: action.newMessagePost,\r\n                likesCount: '0 likes'\r\n            }\r\n            let stateCopy = {\r\n                ...state,\r\n                PostData: [...state.PostData, newPost],\r\n            };\r\n            return stateCopy;\r\n        };\r\n        case 'profile/SET_USER_PROFILE':\r\n            return {\r\n                ...state,\r\n                userProfile: action.profile\r\n            };\r\n        case 'profile/SET_USER_STATUS':\r\n            return {\r\n                ...state,\r\n                status: action.status\r\n            };\r\n        case 'profile/DELETE_POST':\r\n            return {\r\n                ...state,\r\n                PostData: [...state.PostData].filter(p => p.id !== action.postId)\r\n            }\r\n        case 'profile/SET_PHOTO':\r\n            return {\r\n                ...state,\r\n                userProfile: { ...state.userProfile, photos: action.file } as ProfileType\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\ntype ActionTypes = InferActionsTypes<typeof actions>;\r\n\r\nexport const actions = {\r\n    addPostActionCreator: (newMessagePost: string) => {\r\n        return {\r\n            type: 'profile/ADD_POST',\r\n            newMessagePost\r\n        } as const\r\n    },\r\n    setUserProfile: (profile: ProfileType) => {\r\n        return {\r\n            type: 'profile/SET_USER_PROFILE',\r\n            profile\r\n        } as const\r\n    },\r\n    setStatus: (status: string) => {\r\n        return {\r\n            type: 'profile/SET_USER_STATUS',\r\n            status\r\n        } as const\r\n    },\r\n    deletePost: (postId: number) => {\r\n        return {\r\n            type: 'profile/DELETE_POST',\r\n            postId\r\n        } as const\r\n    },\r\n    setPhotoSuccess: (file: PhotosType) => {\r\n        return {\r\n            type: 'profile/SET_PHOTO',\r\n            file\r\n        } as const\r\n    }\r\n}\r\n\r\n\r\ntype ThunkType = BaseThunkType<ActionTypes | FormAction> // 1. то что возвращается 2. глобальный стейт 3. экстрапараметры 4. тип экшнов\r\n\r\n\r\n\r\nexport const userProfileThunkCreator = (userId: number | null): ThunkType => {\r\n    return async (dispatch) => {\r\n        const data = await ProfileApi.getProfile(userId)\r\n        dispatch(actions.setUserProfile(data));\r\n    }\r\n}\r\nexport const getUserStatus = (userId: number | null): ThunkType => async (dispatch) => {\r\n    const data = await ProfileApi.getStatus(userId)\r\n    dispatch(actions.setStatus(data));\r\n}\r\n\r\nexport const updateStatus = (status: string): ThunkType => async (dispatch) => {\r\n    try {\r\n        const data = await ProfileApi.setStatus(status)\r\n        if (data.resultCode === 0) {\r\n            dispatch(actions.setStatus(status))\r\n        }\r\n    } catch (error: any) { // idk\r\n        alert(error.response.status)\r\n    }\r\n}\r\nexport const uploadPhoto = (file: File): ThunkType => async (dispatch) => {\r\n    const data = await ProfileApi.setPhoto(file)\r\n    if (data.resultCode === 0) {\r\n        dispatch(actions.setPhotoSuccess(data.data.photos))\r\n    }\r\n}\r\nexport const saveForm = (formData: ProfileType): ThunkType => async (dispatch, getState) => {\r\n    const data = await ProfileApi.setUserData(formData);\r\n    const userId = getState().auth.userId;\r\n    if (data.resultCode === 0) {\r\n        dispatch(userProfileThunkCreator(userId));\r\n    } else {\r\n        let action = stopSubmit('profileDataForm', { _error: data.messages[0] }); // idk\r\n        dispatch(action);\r\n        return Promise.reject(data.messages[0]);\r\n    }\r\n}\r\n\r\nexport default profileReducer;","export default __webpack_public_path__ + \"static/media/user.96156881.png\";","import { InferActionsTypes } from \"./redux-store\";\r\n\r\ntype MessageDataType = {\r\n    message: string,\r\n    id: string\r\n}\r\n\r\ntype DialogsDataType = {\r\n    name: string,\r\n    id: string,\r\n    img: string\r\n}\r\n\r\nconst initialState = {\r\n    MessageData: [\r\n        { message: 'HI', id: '1' },\r\n        { message: 'How are you?', id: '2' },\r\n        { message: 'YO', id: '3' }\r\n    ] as Array<MessageDataType>,\r\n    DialogData: [\r\n        { name: 'Rodion', id: '1', img: 'https://i.pinimg.com/originals/30/c9/86/30c986e10703ca3a76f0db7deb5bc1c9.jpg' },\r\n        { name: 'Artem', id: '2', img: 'https://i.pinimg.com/originals/30/c9/86/30c986e10703ca3a76f0db7deb5bc1c9.jpg' },\r\n        { name: 'Vlad', id: '3', img: 'https://i.pinimg.com/originals/30/c9/86/30c986e10703ca3a76f0db7deb5bc1c9.jpg' },\r\n        { name: 'Sasha', id: '4', img: 'https://i.pinimg.com/originals/30/c9/86/30c986e10703ca3a76f0db7deb5bc1c9.jpg' },\r\n        { name: 'Yulia', id: '5', img: 'https://i.pinimg.com/originals/30/c9/86/30c986e10703ca3a76f0db7deb5bc1c9.jpg' },\r\n        { name: 'Kamilla', id: '6', img: 'https://i.pinimg.com/originals/30/c9/86/30c986e10703ca3a76f0db7deb5bc1c9.jpg' }\r\n    ] as Array<DialogsDataType>\r\n}\r\n\r\nexport type initialStateType = typeof initialState;\r\ntype ActionsTypes = InferActionsTypes<typeof actions>\r\n\r\nconst dialogsReducer = (state = initialState, action: ActionsTypes): initialStateType => {\r\n    switch (action.type) {\r\n        case 'auth/SEND_MESSAGE': {\r\n            const messagePost = {\r\n                message: action.messageBody,\r\n                id: '7'\r\n            }\r\n            let stateCopy = {\r\n                ...state,\r\n                MessageData: [...state.MessageData, messagePost],\r\n            };\r\n            return stateCopy;\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const actions = {\r\n    addMessage: (messageBody: string) => ({\r\n        type: 'auth/SEND_MESSAGE',\r\n        messageBody\r\n    } as const)\r\n}\r\n\r\n\r\n\r\nexport default dialogsReducer;","// extracted by mini-css-extract-plugin\nmodule.exports = {\"person\":\"Users_person__3aA72\"};","import axios from \"axios\"\r\n\r\nexport const instance = axios.create({\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.0/',\r\n    withCredentials: true,\r\n    headers: {\r\n        'API-KEY': 'c8f4bb25-94f1-4ddf-880b-405bea8616e0'\r\n    }\r\n})\r\n\r\nexport type APIResponseType<D = {}, RC = ResultCodesEnum> = {\r\n    data: D,\r\n    messages: Array<string>,\r\n    resultCode: RC\r\n}\r\n\r\nexport enum ResultCodesEnum {\r\n    Success = 0,\r\n    Error = 1\r\n}\r\n\r\nexport enum ResultCodeForCaptchaEnum {\r\n    CaptchaIsRequired = 10\r\n}","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\r\nimport { NavLink } from 'react-router-dom';\r\nimport s from './Users.module.css'\r\nimport userPhoto from '../../assets/img/user.png';\r\nimport { PhotosType, UserType } from '../../types/types';\r\n\r\ntype PropsType = {\r\n    user: UserType,\r\n    unfollow: (userId: number) => void,\r\n    follow: (userId: number) => void,\r\n    isFollowingProgress: Array<number>,\r\n}\r\n\r\nconst User: React.FC<PropsType> = (props) => {\r\n    const { user, unfollow, follow, isFollowingProgress } = props;\r\n    return (\r\n        <div key={user.id} className={s.person}>\r\n            <NavLink to={'/profile/' + user.id}>\r\n                <img src={user.photos.small ? user.photos.small : userPhoto} alt='persons photos' />\r\n            </NavLink>\r\n            <div>{user.followed\r\n                ? <button disabled={isFollowingProgress.some(el => el === user.id)} onClick={() => {\r\n                    unfollow(user.id)\r\n                }\r\n                }>Unfollow</button>\r\n                : <button disabled={isFollowingProgress.some(el => el === user.id)} onClick={() => {\r\n                    follow(user.id)\r\n                }\r\n                }>Follow</button>}\r\n            </div>\r\n            <div>{user.name}</div>\r\n            <div>{user.status}</div>\r\n            <div>country</div>\r\n            <div>city</div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default User;","import React from 'react';\r\nimport { useState } from 'react';\r\nimport s from './Pagginator.module.css'\r\nimport cn from 'classnames'\r\n\r\n\r\ntype PropsType = {\r\n    usersCounts: number,\r\n    pageSize: number,\r\n    portionUsers: number,\r\n    currentPage: number,\r\n    onPageChanged: (pageNum: number) => void\r\n}\r\nconst Pagginator: React.FC<PropsType> = (props) => {\r\n    let pagesCount = Math.ceil(props.usersCounts / props.pageSize);\r\n    let [portionNumber, setPortionNumber] = useState(1);\r\n    let leftPortionNumber = (portionNumber - 1) * props.portionUsers + 1;\r\n    let rightPortionNumber = portionNumber * props.portionUsers;\r\n    let pages = [];\r\n    for (let i = 1; i <= pagesCount; i++) {\r\n        pages.push(i)\r\n    }\r\n    return (\r\n        <div className={s.pagginator}>\r\n            {portionNumber > 1 && <button onClick={() => setPortionNumber(portionNumber - 1)}>Prev</button>}\r\n            {pages\r\n                .filter(el => el >= leftPortionNumber && el <= rightPortionNumber)\r\n                .map(p => {\r\n                    return (\r\n                        <span onClick={() => props.onPageChanged(p)} className={cn(s.page, { [s.selectedPage]: (props.currentPage === p) })\r\n                        }>\r\n                            {p + ' '}\r\n                        </span>\r\n                    )\r\n                })}\r\n            <button onClick={() => setPortionNumber(portionNumber + 1)}>Next</button>\r\n            {!(Math.ceil(portionNumber) == Math.ceil((pagesCount / props.portionUsers))) && <button onClick={() => setPortionNumber(portionNumber = pagesCount / props.portionUsers)}>Lastpage</button>}\r\n        </div >\r\n    )\r\n}\r\n\r\nexport default Pagginator;","//         users: state.usersPage.users,\r\n//         pageSize: state.usersPage.pageSize,\r\n//         usersCounts: state.usersPage.usersCounts,\r\n//         currentPage: state.usersPage.currentPage,\r\n//         isFetching: state.usersPage.isFetching,\r\n//         isFollowingProgress: state.usersPage.isFollowingProgress\r\n\r\nimport { createSelector } from \"reselect\"\r\nimport { AppStateType } from \"../../redux/redux-store\"\r\n\r\nexport const getUsers = (state: AppStateType) => {\r\n    return state.usersPage.users\r\n}\r\n\r\nexport const getUsersSelector = createSelector(getUsers, (users) => {\r\n    return users.filter(u => true)\r\n})\r\nexport const getPageSize = (state: AppStateType) => {\r\n    return state.usersPage.pageSize\r\n}\r\nexport const getPortionUsers = (state: AppStateType) => {\r\n    return state.usersPage.portionUsers\r\n}\r\nexport const getUsersCounts = (state: AppStateType) => {\r\n    return state.usersPage.usersCounts\r\n}\r\nexport const getCurrentPage = (state: AppStateType) => {\r\n    return state.usersPage.currentPage\r\n}\r\nexport const getFetching = (state: AppStateType) => {\r\n    return state.usersPage.isFetching\r\n}\r\nexport const getFollowingProgress = (state: AppStateType) => {\r\n    return state.usersPage.isFollowingProgress\r\n}\r\nexport const getUsersFilter = (state: AppStateType) => {\r\n    return state.usersPage.filter\r\n}","import { Field, Form, Formik } from 'formik';\r\nimport React from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport { FilterType } from '../../redux/users-reducer';\r\nimport { getUsersFilter } from './UsersSelectors';\r\n\r\nconst usersSearchFormValidate = (values: any) => {\r\n    const errors = {};\r\n    return errors;\r\n};\r\ntype PropsType = {\r\n    onFilterChanged: (filter: FilterType) => void\r\n}\r\ntype FriendFormType = 'null' | 'true' | 'false';\r\n\r\ntype FormType = {\r\n    term: string,\r\n    friend: FriendFormType\r\n}\r\n\r\nexport const UserSearchForm: React.FC<PropsType> = React.memo((props) => {\r\n\r\n    const filter = useSelector(getUsersFilter);\r\n\r\n    const submit = (values: FormType, { setSubmitting }: { setSubmitting: (isSubmiting: boolean) => void }) => {\r\n        const filter: FilterType = {\r\n            term: values.term,\r\n            friend: values.friend === \"null\" ? null : values.friend === \"false\" ? false : true\r\n        }\r\n        props.onFilterChanged(filter);\r\n        setSubmitting(false)\r\n    };\r\n    return (\r\n        <div>\r\n            <Formik\r\n                enableReinitialize\r\n                initialValues={{ term: filter.term, friend: String(filter.friend) as FriendFormType }}\r\n                validate={usersSearchFormValidate}\r\n                onSubmit={submit}\r\n            >\r\n                {({ isSubmitting }) => (\r\n                    <Form>\r\n                        <Field type=\"text\" name=\"term\" />\r\n                        <Field name=\"friend\" as=\"select\">\r\n                            <option value=\"null\">All</option>\r\n                            <option value=\"true\">Only followed</option>\r\n                            <option value=\"false\">Only unfollowed</option>\r\n                        </Field>\r\n                        <button type=\"submit\" disabled={isSubmitting}>\r\n                            Find\r\n                        </button>\r\n                    </Form>\r\n                )}\r\n            </Formik>\r\n        </div>\r\n    );\r\n});\r\n","import { UserType } from \"../../types/types\";\r\nimport { instance, APIResponseType } from \"./requestsAPI\";\r\n\r\nexport type getUsersResponseType = {\r\n    items: Array<UserType>,\r\n    totalCount: number,\r\n    error: string\r\n}\r\nexport const UsersApi = {\r\n    userUnfollow(id: number) {\r\n        return instance.delete<APIResponseType>(`follow/${id}`)\r\n            .then(response => { return response.data; });\r\n    },\r\n    userFollow(id: number) {\r\n        return instance.post<APIResponseType>(`follow/${id}`, {})\r\n            .then(response => response.data);\r\n    },\r\n    getUsers(currentPage: number, pageSize: number, term: string = '', friend: null | boolean = null) {\r\n        return instance.get<getUsersResponseType>(`users?page=${currentPage}&count=${pageSize}&term=${term}` + (friend === null ? '' : `&friend=${friend}`))\r\n            .then(response => response.data);\r\n    }\r\n};\r\n","import { PhotosType, UserType } from './../types/types';\r\nimport { UsersApi } from \"../components/api/UsersApi\";\r\nimport { Dispatch } from 'react';\r\nimport { AppStateType, BaseThunkType, InferActionsTypes } from './redux-store';\r\nimport { ThunkAction } from 'redux-thunk';\r\nimport { APIResponseType } from '../components/api/requestsAPI';\r\n\r\n\r\nconst initialState = {\r\n    users: [] as Array<UserType>,\r\n    pageSize: 10,\r\n    portionUsers: 25,\r\n    usersCounts: 0,\r\n    currentPage: 1,\r\n    isFetching: false,\r\n    isFollowingProgress: [] as Array<number>, // array of users ids\r\n    filter: {\r\n        term: '',\r\n        friend: null as null | boolean\r\n    }\r\n}\r\n\r\nexport type InitialStateType = typeof initialState\r\nexport type FilterType = typeof initialState.filter\r\n\r\nconst usersReducer = (state = initialState, action: ActionsTypes): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'users/FOLLOW':\r\n            return {\r\n                ...state,\r\n                users: state.users.map(u => {\r\n                    if (u.id === action.id) {\r\n                        return { ...u, followed: true }\r\n                    }\r\n                    return u;\r\n                })\r\n            }\r\n\r\n        case 'users/UNFOLLOW':\r\n            return {\r\n                ...state,\r\n                users: state.users.map(u => {\r\n                    if (u.id === action.id) {\r\n                        return { ...u, followed: false }\r\n                    }\r\n                    return u;\r\n                })\r\n            }\r\n        case 'users/SET_USERS': {\r\n            return { ...state, users: [...action.users] }\r\n        }\r\n        case 'users/SET_CURRENT_PAGE': {\r\n            return { ...state, currentPage: action.currentPage }\r\n        }\r\n        case 'users/USERS_COUNTS': {\r\n            return { ...state, usersCounts: action.usersCounts }\r\n        }\r\n        case 'users/TOGGLE_IS_FETCHING': {\r\n            return { ...state, isFetching: action.isFetching }\r\n        }\r\n        case 'users/SET_FILTER': {\r\n            return { ...state, filter: action.payload }\r\n        }\r\n        case 'users/TOGGLE_FOLLOWING_PROGRESS': {\r\n            return {\r\n                ...state,\r\n                isFollowingProgress: action.isFetching\r\n                    ? [...state.isFollowingProgress, action.id]\r\n                    : state.isFollowingProgress.filter(id => id !== action.id)\r\n            }\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\ntype ActionsTypes = InferActionsTypes<typeof actions>;\r\n\r\nexport const actions = {\r\n    follow: (id: number) => {\r\n        return {\r\n            type: 'users/FOLLOW',\r\n            id: id\r\n        } as const\r\n    },\r\n    unfollow: (id: number) => {\r\n        return {\r\n            type: 'users/UNFOLLOW',\r\n            id: id\r\n        } as const\r\n    },\r\n    setUsers: (users: Array<UserType>) => {\r\n        return {\r\n            type: 'users/SET_USERS',\r\n            users: users\r\n        } as const\r\n    },\r\n    setCurrentPage: (page: number) => {\r\n        return {\r\n            type: 'users/SET_CURRENT_PAGE',\r\n            currentPage: page\r\n        } as const\r\n    },\r\n    setUsersCounts: (usersNumber: number) => {\r\n        return {\r\n            type: 'users/USERS_COUNTS',\r\n            usersCounts: usersNumber\r\n        } as const\r\n    },\r\n    setFilter: (filter: FilterType) => {\r\n        return {\r\n            type: 'users/SET_FILTER',\r\n            payload: filter\r\n        } as const\r\n    },\r\n    toggleIsFetching: (isFetching: boolean) => {\r\n        return {\r\n            type: 'users/TOGGLE_IS_FETCHING',\r\n            isFetching\r\n        } as const\r\n    },\r\n    toggleFollowingProgress: (isFetching: boolean, id: number) => {\r\n        return {\r\n            type: 'users/TOGGLE_FOLLOWING_PROGRESS',\r\n            isFetching,\r\n            id\r\n        } as const\r\n    }\r\n}\r\n\r\n\r\ntype DispatchType = Dispatch<ActionsTypes>;\r\ntype ThunkType = BaseThunkType<ActionsTypes>;\r\n\r\n\r\nexport const getUsersThunkAction = (page: number, pageSize: number, filter: FilterType): ThunkType => {\r\n    return async (dispatch, getState) => {\r\n        dispatch(actions.toggleIsFetching(true));\r\n        dispatch(actions.setCurrentPage(page));\r\n        dispatch(actions.setFilter(filter));\r\n        const data = await UsersApi.getUsers(page, pageSize, filter.term, filter.friend)\r\n        dispatch(actions.toggleIsFetching(false))\r\n        dispatch(actions.setUsers(data.items));\r\n        dispatch(actions.setUsersCounts(data.totalCount))\r\n    }\r\n}\r\n\r\nconst followUnfollowFlow = async (dispatch: DispatchType, userId: number, apiMethod: (userId: number) => Promise<APIResponseType>, actionCreator: (userId: number) => ActionsTypes) => {\r\n    dispatch(actions.toggleFollowingProgress(true, userId))\r\n    const data = await apiMethod(userId)\r\n    if (data.resultCode === 0) {\r\n        dispatch(actions.toggleFollowingProgress(false, userId))\r\n        dispatch(actionCreator(userId))\r\n    }\r\n}\r\n\r\n\r\nexport const unfollowSuccessThunkAction = (userId: number): ThunkType => {\r\n    return async (dispatch) => {\r\n        await followUnfollowFlow(dispatch, userId, UsersApi.userUnfollow, actions.unfollow)\r\n    }\r\n}\r\nexport const followSuccessThunkAction = (userId: number): ThunkType => {\r\n    return async (dispatch) => {\r\n        await followUnfollowFlow(dispatch, userId, UsersApi.userFollow, actions.follow)\r\n    }\r\n}\r\n\r\n\r\n\r\nexport default usersReducer;","import React, { useEffect } from 'react';\r\nimport User from './User';\r\nimport Pagginator from '../common/pagginator/Pagginator';\r\nimport { UserType } from '../../types/types';\r\nimport { UserSearchForm } from './usersSearchForm';\r\nimport { FilterType, followSuccessThunkAction, getUsersThunkAction, unfollowSuccessThunkAction } from '../../redux/users-reducer';\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { getCurrentPage, getFollowingProgress, getPageSize, getPortionUsers, getUsersCounts, getUsersFilter, getUsersSelector } from './UsersSelectors';\r\nimport { useHistory } from 'react-router';\r\n\r\ntype PropsType = {\r\n    // usersCounts: number,\r\n    // pageSize: number,\r\n    // portionUsers: number,\r\n    // currentPage: number,\r\n    // onFilterChanged: (filter: FilterType) => void,\r\n    // users: Array<UserType>,\r\n    // unfollowSuccessThunkAction: (userId: number) => void,\r\n    // followSuccessThunkAction: (userId: number) => void,\r\n    // isFollowingProgress: Array<number>\r\n}\r\nexport const Users: React.FC<PropsType> = (props) => {\r\n\r\n    const usersCounts = useSelector(getUsersCounts)\r\n    const currentPage = useSelector(getCurrentPage)\r\n    const pageSize = useSelector(getPageSize)\r\n    const portionUsers = useSelector(getPortionUsers)\r\n    const filter = useSelector(getUsersFilter)\r\n    const users = useSelector(getUsersSelector)\r\n    const isFollowingProgress = useSelector(getFollowingProgress)\r\n    const dispatch = useDispatch();\r\n    const history = useHistory();\r\n\r\n\r\n    useEffect(() => {\r\n        const { search } = history.location\r\n        const params = new URLSearchParams(search);\r\n        let actualPage = currentPage;\r\n        let actualFilter = filter;\r\n        if (!!params.get('page')) actualPage = Number(params.get('page'));\r\n        if (!!params.get('term')) actualFilter = { ...actualFilter, term: params.get('term') as string }\r\n        if (!!params.get('friend')) actualFilter = { ...actualFilter, friend: params.get('friend') === 'null' ? null : params.get('friend') === 'true' ? true : false }\r\n        dispatch(getUsersThunkAction(actualPage, pageSize, actualFilter))\r\n    }, [])\r\n    useEffect(() => {\r\n        history.push({\r\n            pathname: '/developers',\r\n            search: `?term=${filter.term}&friend=${filter.friend}&page=${currentPage}`\r\n        })\r\n    }, [filter, currentPage])\r\n\r\n    const follow = (userId: number) => {\r\n        dispatch(followSuccessThunkAction(userId))\r\n    }\r\n    const unfollow = (userId: number) => {\r\n        dispatch(unfollowSuccessThunkAction(userId))\r\n    }\r\n\r\n    const onPageChanged = (pageNumber: number) => {\r\n        dispatch(getUsersThunkAction(pageNumber, pageSize, filter))\r\n    }\r\n\r\n    const onFilterChanged = (filter: FilterType) => {\r\n        dispatch(getUsersThunkAction(1, pageSize, filter))\r\n    }\r\n\r\n    return (\r\n        <div >\r\n            <UserSearchForm onFilterChanged={onFilterChanged} />\r\n            <Pagginator\r\n                portionUsers={portionUsers}\r\n                usersCounts={usersCounts}\r\n                pageSize={pageSize}\r\n                onPageChanged={onPageChanged}\r\n                currentPage={currentPage} />\r\n            {users.map(u =>\r\n                <User\r\n                    key={u.id}\r\n                    user={u}\r\n                    follow={follow}\r\n                    unfollow={unfollow}\r\n                    isFollowingProgress={isFollowingProgress}\r\n                />)}\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { compose } from 'redux';\r\nimport { AppStateType } from '../../redux/redux-store';\r\nimport { getUsersThunkAction, unfollowSuccessThunkAction, followSuccessThunkAction, FilterType } from '../../redux/users-reducer';\r\nimport { UserType } from '../../types/types';\r\nimport Preloader from '../common/preloader/preloader';\r\nimport { Users } from './Users';\r\nimport { getCurrentPage, getFetching, getFollowingProgress, getPageSize, getPortionUsers, getUsers, getUsersCounts, getUsersFilter, getUsersSelector } from './UsersSelectors';\r\nimport { useSelector } from 'react-redux'\r\n\r\n\r\ntype UsersPagePropsType = {\r\n    pageTitle: string\r\n}\r\n\r\nexport const UsersPage: React.FC<UsersPagePropsType> = (props) => {\r\n    const isFetching = useSelector(getFetching)\r\n    return <>\r\n        <h2>{props.pageTitle}</h2>\r\n        {isFetching ? <Preloader /> : null}\r\n        <Users />\r\n    </>\r\n}\r\n\r\n// class UsersContainer extends React.Component<PropsType> {\r\n\r\n//     componentDidMount() {\r\n//         this.props.getUsersThunkAction(this.props.currentPage, this.props.pageSize, this.props.filter)\r\n//     }\r\n\r\n\r\n\r\n\r\n//     render() {\r\n//         return (\r\n//             <>\r\n//                 <h2>{this.props.pageTitle}</h2>\r\n//                 {this.props.isFetching ? <Preloader /> : null}\r\n//                 <Users\r\n                // usersCounts={this.props.usersCounts}\r\n                // pageSize={this.props.pageSize}\r\n                // currentPage={this.props.currentPage}\r\n                // onPageChanged={this.onPageChanged}\r\n                // users={this.props.users}\r\n                // onFilterChanged={this.onFilterChanged}\r\n                // follow={this.props.follow}\r\n                // unfollow={this.props.unfollow}\r\n                // isFollowingProgress={this.props.isFollowingProgress}\r\n                // toggleFollowingProgress={this.props.toggleFollowingProgress}\r\n                // unfollowSuccessThunkAction={this.props.unfollowSuccessThunkAction}\r\n                // followSuccessThunkAction={this.props.followSuccessThunkAction}\r\n                // portionUsers={this.props.portionUsers}\r\n//                 />\r\n//             </>\r\n//         )\r\n//     }\r\n// }\r\n\r\n// const mapStateToProps = (state) => {\r\n//     return {\r\n//         users: state.usersPage.users,\r\n//         pageSize: state.usersPage.pageSize,\r\n//         usersCounts: state.usersPage.usersCounts,\r\n//         currentPage: state.usersPage.currentPage,\r\n//         isFetching: state.usersPage.isFetching,\r\n//         isFollowingProgress: state.usersPage.isFollowingProgress\r\n//     }\r\n// }\r\n\r\n\r\n// const mapStateToProps = (state: AppStateType): MapStatePropsType => {\r\n//     return {\r\n//         users: getUsersSelector(state),\r\n//         pageSize: getPageSize(state),\r\n//         usersCounts: getUsersCounts(state),\r\n//         currentPage: getCurrentPage(state),\r\n//         isFetching: getFetching(state),\r\n//         isFollowingProgress: getFollowingProgress(state),\r\n//         portionUsers: getPortionUsers(state),\r\n//         filter: getUsersFilter(state)\r\n//     }\r\n// }\r\n\r\n//TStateProps = {}, TDispatchProps = {}, TOwnProps = {}, State = DefaultState из дженериков\r\n// export default compose(\r\n//     connect<MapStatePropsType, MapDispatchPropsType, OwnPropsType, AppStateType>\r\n//         (mapStateToProps,\r\n//             {\r\n//                 // follow,\r\n//                 // unfollow,\r\n//                 // toggleFollowingProgress,\r\n//                 getUsersThunkAction,\r\n//                 unfollowSuccessThunkAction,\r\n//                 followSuccessThunkAction\r\n//             }))\r\n//     (UsersContainer)","import { instance } from \"./requestsAPI\";\r\n\r\nexport type UrlApiResponseType = {\r\n    url: string\r\n}\r\n\r\nexport const UrlApi = {\r\n    getCaptchaUrl() {\r\n        return instance.get<UrlApiResponseType>('security/get-captcha-url')\r\n            .then(response => response.data);\r\n    }\r\n};\r\n","import { instance, APIResponseType, ResultCodeForCaptchaEnum, ResultCodesEnum } from \"./requestsAPI\";\r\n\r\n\r\n\r\ntype MeResponseDataType = {\r\n    id: number,\r\n    email: string,\r\n    login: string\r\n}\r\ntype LoginResponseDataType = {\r\n    userId: number\r\n}\r\ntype LogoutResponseType = {\r\n    data: {},\r\n    resultCode: ResultCodesEnum,\r\n    messages: Array<string>\r\n}\r\n\r\nexport const AuthApi = {\r\n    authMe() {\r\n        return instance.get<APIResponseType<MeResponseDataType>>('auth/me')\r\n            .then(response => response.data);\r\n    },\r\n    login(email: string, password: string, rememberMe: boolean = false, captcha: string | null = null) {\r\n        return instance.post<APIResponseType<LoginResponseDataType, ResultCodesEnum | ResultCodeForCaptchaEnum>>('auth/login', { email, password, rememberMe, captcha });\r\n    },\r\n    logout() {\r\n        return instance.delete<APIResponseType<LogoutResponseType>>('auth/login');\r\n    }\r\n};\r\n","import { ResultCodeForCaptchaEnum, ResultCodesEnum } from \"../components/api/requestsAPI\"\r\nimport { UrlApi } from \"../components/api/UrlApi\";\r\nimport { AuthApi } from \"../components/api/AuthApi\";\r\nimport { FormAction, stopSubmit } from \"redux-form\";\r\nimport { ThunkAction } from \"redux-thunk\";\r\nimport { AppStateType, BaseThunkType, InferActionsTypes } from \"./redux-store\";\r\nimport { Action } from \"redux\";\r\n\r\n\r\nconst initialState = {\r\n    userId: null as number | null,\r\n    email: null as string | null,\r\n    login: null as string | null,\r\n    auth: false,\r\n    url: null as string | null\r\n}\r\nexport type InitialStateType = typeof initialState;\r\n\r\nconst authReducer = (state = initialState, action: ActionsTypes): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'auth/SET_USER_DATA':\r\n            return {\r\n                ...state,\r\n                ...action.data\r\n            }\r\n        case 'auth/SET_CAPTCHA_URL':\r\n            return {\r\n                ...state,\r\n                url: action.url\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\ntype ActionsTypes = InferActionsTypes<typeof actions>;\r\ntype ThunkType = BaseThunkType<ActionsTypes | FormAction>;\r\n\r\n\r\nexport const actions = {\r\n    setUserData: (userId: number | null, email: string | null, login: string | null, auth: boolean) => ({ type: 'auth/SET_USER_DATA', data: { userId, email, login, auth } } as const),\r\n    setCaptchaUrl: (url: string) => ({ type: 'auth/SET_CAPTCHA_URL', url } as const)\r\n}\r\n\r\n\r\nexport const authMeThunkCreator = (): ThunkType => async (dispatch) => {\r\n    const data = await AuthApi.authMe()\r\n\r\n    if (data.resultCode === ResultCodesEnum.Success) {\r\n        const { id, email, login } = data.data\r\n        dispatch(actions.setUserData(id, email, login, true))\r\n    }\r\n}\r\n\r\n\r\nexport const loginMe = (email: string, password: string, rememberMe: boolean, captcha: string): ThunkType => async (dispatch) => {\r\n    const response = await AuthApi.login(email, password, rememberMe, captcha)\r\n    if (response.data.resultCode === ResultCodesEnum.Success) {\r\n        dispatch(authMeThunkCreator())\r\n    } else {\r\n        if (response.data.resultCode === ResultCodeForCaptchaEnum.CaptchaIsRequired) {\r\n            const data = await UrlApi.getCaptchaUrl()\r\n            const url = data.url;\r\n            dispatch(actions.setCaptchaUrl(url));\r\n        }\r\n        let action = stopSubmit('loginForm', { _error: response.data.messages[0] }); //idk\r\n        dispatch(action);\r\n    }\r\n}\r\n\r\nexport const logoutMe = (): ThunkType => async (dispatch) => {\r\n    const response = await AuthApi.logout()\r\n    if (response.data.resultCode === ResultCodesEnum.Success) {\r\n        dispatch(actions.setUserData(null, null, null, false))\r\n    }\r\n}\r\n\r\n\r\nexport default authReducer;","import React from 'react';\r\nimport { connect, useDispatch, useSelector } from 'react-redux';\r\nimport { Field, InjectedFormProps, reduxForm } from 'redux-form'\r\nimport { maxLength, required } from '../../utils/validators/validators';\r\nimport { Input } from '../common/FormsContriols/FormsControls';\r\nimport { loginMe } from '../../redux/auth-reducer'\r\nimport { Redirect } from 'react-router-dom';\r\nimport style from './Login.module.css'\r\nimport { AppStateType } from '../../redux/redux-store';\r\n\r\n\r\nconst maxLength30 = maxLength(30);\r\ntype LoginFormOwnProps = {\r\n    url: string | null\r\n}\r\nconst LoginForm: React.FC<InjectedFormProps<LoginFormValuesType, LoginFormOwnProps> & LoginFormOwnProps> = ({ handleSubmit, error, url }) => {\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            <div>\r\n                <Field name={'email'} component={Input} placeholder={'Login'} validate={[required, maxLength30]} />\r\n            </div>\r\n            <div>\r\n                <Field name={'password'} component={Input} placeholder={'Password'} validate={[required]} type='password' />\r\n            </div>\r\n            <div>\r\n                <Field name={'rememberMe'} component={Input} type={'checkbox'} /> remember me\r\n            </div>\r\n            {error && <div className={style.summaryError}>\r\n                {error}\r\n            </div>}\r\n            {url && <img src={url} alt='captcha' className={style.captchaImg} />}\r\n            {url && <Field name={'captcha'} component={Input} placeholder={'captcha'} validate={[required]} />}\r\n            <div>\r\n                <button>Login</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nconst ReduxLoginForm = reduxForm<LoginFormValuesType, LoginFormOwnProps>({\r\n    form: 'loginForm'\r\n})(LoginForm)\r\n\r\n// type MapStatePropsType = {\r\n//     url: string | null,\r\n//     isAuth: boolean\r\n// }\r\n// type MapDispatchPropsType = {\r\n//     loginMe: (email: string, password: string, rememberMe: boolean, captcha: string) => void\r\n// }\r\n\r\n// type PropsType = MapStatePropsType & MapDispatchPropsType\r\ntype LoginFormValuesType = {\r\n    password: string,\r\n    email: string,\r\n    rememberMe: boolean,\r\n    captcha: string\r\n}\r\n\r\nexport const Login = () => {\r\n    const isAuth = useSelector((state: AppStateType) => state.auth.auth)\r\n    const url = useSelector((state: AppStateType) => state.auth.url)\r\n    const dispatch = useDispatch()\r\n    const onChangeSubmit = (formData: LoginFormValuesType) => {\r\n        dispatch(loginMe(formData.email, formData.password, formData.rememberMe, formData.captcha))\r\n    }\r\n    if (isAuth) {\r\n        return <Redirect to='/profile' />\r\n    }\r\n\r\n    return <>\r\n        <h1>Login</h1>\r\n        <ReduxLoginForm onSubmit={onChangeSubmit} url={url} />\r\n    </>\r\n}\r\n// const Login: React.FC<PropsType> = (props) => {\r\n//     const onChangeSubmit = (formData: LoginFormValuesType) => {\r\n//         props.loginMe(formData.email, formData.password, formData.rememberMe, formData.captcha)\r\n//     }\r\n//     if (props.isAuth) {\r\n//         return <Redirect to='/profile' />\r\n//     }\r\n//     return (\r\n//         <>\r\n//             <h1>Login</h1>\r\n//             <ReduxLoginForm onSubmit={onChangeSubmit} url={props.url} />\r\n//         </>\r\n//     )\r\n// }\r\n\r\n// const mapStateToProps = (state: AppStateType): MapStatePropsType => ({\r\n//     isAuth: state.auth.auth,\r\n//     url: state.auth.url\r\n// })\r\n\r\n// export default connect(mapStateToProps, { loginMe })(Login)","import { ThunkAction } from \"redux-thunk\";\r\nimport { authMeThunkCreator } from \"./auth-reducer\"\r\nimport { AppStateType, InferActionsTypes } from \"./redux-store\";\r\n\r\n\r\nconst initialState = {\r\n    inizialized: false,\r\n    globalError: null as string | null\r\n}\r\n\r\nexport type InitialStateType = typeof initialState;\r\n\r\n\r\nconst appReducer = (state = initialState, action: ActionsTypes): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'INIZIALIZED_APP':\r\n            return {\r\n                ...state,\r\n                inizialized: true\r\n            }\r\n        case 'GET_ERROR':\r\n            return {\r\n                ...state,\r\n                globalError: action.error\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\ntype ActionsTypes = InferActionsTypes<typeof actions>;\r\n\r\n\r\nconst actions = {\r\n    inizialize: () => ({ type: 'INIZIALIZED_APP' } as const),\r\n    getError: (error: null | string) => ({ type: 'GET_ERROR', error } as const)\r\n}\r\n\r\n\r\ntype ThunkType = ThunkAction<Promise<void>, AppStateType, unknown, ActionsTypes> // 1. то что возвращается 2. глобальный стейт 3. экстрапараметры 4. тип экшнов\r\n\r\nexport const inizializedApp = () => (dispatch: any) => { // ??????????\r\n    const promise = dispatch(authMeThunkCreator())\r\n    Promise.all([promise])\r\n        .then(() => dispatch(actions.inizialize()))\r\n}\r\n\r\nexport const showGetError = (error: null | string) => (dispatch: any) => { // ????????????\r\n    dispatch(actions.getError(error));\r\n    setTimeout(() => dispatch(actions.getError(null)), 5000);\r\n}\r\n\r\n\r\nexport default appReducer;","type FriendsType = {\r\n    name: string,\r\n    avatar: string\r\n}\r\n\r\nconst initialState = {\r\n    friends: [\r\n        { name: 'Serega', avatar: 'https://tattoo-stickers.ru/34939-thickbox_default/nichosi.jpg' },\r\n        { name: 'Semen', avatar: 'https://tattoo-stickers.ru/34939-thickbox_default/nichosi.jpg' },\r\n        { name: 'Masha', avatar: 'https://tattoo-stickers.ru/34939-thickbox_default/nichosi.jpg' }\r\n    ] as Array<FriendsType>\r\n}\r\ntype initialStateType = typeof initialState;\r\n\r\nconst sidebarReducer = (state = initialState, action: any): initialStateType => {\r\n\r\n    let stateCopy = { ...state }\r\n    return stateCopy;\r\n}\r\nexport default sidebarReducer;","import { applyMiddleware, combineReducers, createStore, compose, Action } from \"redux\";\r\nimport profileReducer from './profile-reducer';\r\nimport dialogsReducer from './dialogs-reducer';\r\nimport sidebarReducer from './sidebar-reducer';\r\nimport usersReducer from \"./users-reducer\";\r\nimport authReducer from \"./auth-reducer\";\r\nimport thunkMiddleWare, { ThunkAction } from 'redux-thunk';\r\nimport { reducer as formReducer } from 'redux-form'\r\nimport appReducer from \"./app-reducer\";\r\n\r\nlet reducers = combineReducers({\r\n    profilePage: profileReducer,\r\n    dialogsPage: dialogsReducer,\r\n    sidebar: sidebarReducer,\r\n    usersPage: usersReducer,\r\n    auth: authReducer,\r\n    form: formReducer,\r\n    app: appReducer\r\n})\r\n\r\ntype PropertiesTypes<T> = T extends { [key: string]: infer U } ? U : never\r\n\r\nexport type InferActionsTypes<T extends { [key: string]: (...params: any[]) => any }> = ReturnType<PropertiesTypes<T>>\r\nexport type BaseThunkType<A extends Action, R = Promise<void>> = ThunkAction<R, AppStateType, unknown, A> // 1. то что возвращается 2. глобальный стейт 3. экстрапараметры 4. тип экшнов\r\n\r\ntype ReducerType = typeof reducers; // state на входе\r\nexport type AppStateType = ReturnType<ReducerType> // state на выходе (позволяет видеть приходящие параметры в state)\r\n\r\n//@ts-ignore\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\n\r\nconst store = createStore(reducers, composeEnhancers(applyMiddleware(thunkMiddleWare)));\r\n\r\n\r\n\r\nexport default store;\r\n\r\n","import React from 'react'\r\n\r\n\r\nfunction withSuspense<WCP>(WrappedComponent: React.ComponentType<WCP>) {\r\n    return (props: WCP) => {\r\n        return (\r\n            <React.Suspense fallback={<div>Loading...</div>}>\r\n                <WrappedComponent {...props} />\r\n            </React.Suspense>\r\n        )\r\n    }\r\n}\r\n\r\nexport default withSuspense;","//         users: state.usersPage.users,\r\n//         pageSize: state.usersPage.pageSize,\r\n//         usersCounts: state.usersPage.usersCounts,\r\n//         currentPage: state.usersPage.currentPage,\r\n//         isFetching: state.usersPage.isFetching,\r\n//         isFollowingProgress: state.usersPage.isFollowingProgress\r\n\r\nimport { AppStateType } from \"../../redux/redux-store\"\r\n\r\nexport const selectIsAuth = ((state: AppStateType) => {\r\n    return state.auth.auth\r\n})\r\nexport const selectCurrentUserLogin = ((state: AppStateType) => {\r\n    return state.auth.login\r\n})","import { Avatar, Col, Layout, Row, Menu, Button } from 'antd';\r\nimport React from 'react';\r\nimport { Link, NavLink } from 'react-router-dom';\r\nimport s from './Header.module.css'\r\nimport { UserOutlined, LaptopOutlined, NotificationOutlined } from '@ant-design/icons';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { AppStateType } from '../../redux/redux-store';\r\nimport { selectCurrentUserLogin, selectIsAuth } from './AuthSelectors';\r\nimport { logoutMe } from '../../redux/auth-reducer';\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nexport const AppHeader: React.FC<{}> = (props) => {\r\n    const isAuth = useSelector(selectIsAuth)\r\n    const login = useSelector(selectCurrentUserLogin)\r\n\r\n    const dispatch = useDispatch()\r\n    const logoutCallback = () => {\r\n        dispatch(logoutMe())\r\n    }\r\n    const { Header } = Layout;\r\n\r\n    return (\r\n        <Header className=\"header\">\r\n            <Row>\r\n                <Col span={18}>\r\n                    <Menu theme=\"dark\" mode=\"horizontal\" defaultSelectedKeys={['2']}>\r\n                        <Menu.Item key=\"1\"><Link to=\"/developers\">Developers</Link></Menu.Item>\r\n                    </Menu>\r\n                </Col>\r\n                {isAuth\r\n                    ? <>\r\n                        <Col span={2}>\r\n                            <div>\r\n                                <Avatar alt={login || ''} style={{ backgroundColor: '#87d068' }} icon={<UserOutlined />} />\r\n                            </div>\r\n                        </Col>\r\n                        <Col span={4}>\r\n                            <div>\r\n                                <Button onClick={logoutCallback}>Logout</Button>\r\n                            </div>\r\n                        </Col>\r\n                    </>\r\n                    :\r\n                    <Col span={6}>\r\n                        <Button>\r\n                            <Link to='/auth'>Login</Link>\r\n                        </Button>\r\n                    </Col>}\r\n            </Row>\r\n        </Header>\r\n\r\n        // <header className={s.header}>\r\n        //     <img src='https://logonoid.com/images/human-rights-logo.png' />\r\n        //     <div className={s.login}>\r\n        // {props.auth\r\n        //     ? <div><a href='#'>{props.email}</a> <button onClick={logoutCallback}>Logout</button> </div>\r\n        //     : <NavLink to='/auth'>Login</NavLink>}\r\n        //     </div>\r\n        // </header>\r\n    )\r\n}\r\n\r\n","import React from 'react';\nimport './App.css';\nimport 'antd/dist/antd.css';\nimport { BrowserRouter, Link, NavLink, Redirect, Route, Switch } from 'react-router-dom';\n//import ProfileContainer from './components/Profile/ProfileContainer';\n//import DialogsContainer from './components/Dialogs/DialogsContainer';\nimport { UsersPage } from './components/Users/UsersContainer';\nimport { Login } from './components/Login/Login';\nimport { connect } from 'react-redux';\nimport { compose } from 'redux';\nimport { inizializedApp, showGetError } from './redux/app-reducer'\nimport Preloader from './components/common/preloader/preloader';\nimport { Provider } from 'react-redux';\nimport store, { AppStateType } from './redux/redux-store';\nimport withSuspense from './components/hoc/withSuspense';\nimport Navbar from './components/Navbar/Navbar';\nimport { Layout, Menu, Breadcrumb, Avatar, Col, Row } from 'antd';\nimport { UserOutlined, LaptopOutlined, NotificationOutlined } from '@ant-design/icons';\nimport s from './components/Navbar/Navbar.module.css';\nimport { AppHeader } from './components/Header/Header';\n\n\nconst ProfileContainer = React.lazy(() => import('./components/Profile/ProfileContainer'))\nconst DialogsContainer = React.lazy(() => import('./components/Dialogs/DialogsContainer'))\n// const NavbarContainer = React.lazy(() => import('./components/Navbar/NavbarContainer'))\n// const UsersContainer = React.lazy(() => import('./components/Users/UsersContainer'))\n// const Login = React.lazy(() => import('./components/Login/Login'))\n\ntype MapPropsType = ReturnType<typeof mapStateToProps>\ntype DispatchPropsType = {\n  inizializedApp: () => void,\n  showGetError: (message: string) => void\n}\nconst SuspendedProfile = withSuspense(ProfileContainer);\nconst SuspendedDialogs = withSuspense(DialogsContainer);\n\nclass App extends React.Component<MapPropsType & DispatchPropsType> {\n  catchAllUnhandleRejection = (event: PromiseRejectionEvent) => {\n    console.warn(\"Внимание: Необработанная ошибка Promise. Позор вам! Причина: \" + event.reason);\n    this.props.showGetError(event.reason.message)\n  }\n  componentDidMount() {\n    this.props.inizializedApp();\n    window.addEventListener(\"unhandledrejection\", this.catchAllUnhandleRejection);\n  }\n  componentWillUnmount() {\n    window.removeEventListener(\"unhandledrejection\", this.catchAllUnhandleRejection);\n  }\n  render() {\n    if (!this.props.inizialized) return <Preloader />\n    const { SubMenu } = Menu;\n    const { Content, Footer, Sider } = Layout;\n    return (\n      <Layout>\n        <AppHeader />\n        <Content style={{ padding: '0 50px' }}>\n          <Breadcrumb style={{ margin: '16px 0' }}>\n            <Breadcrumb.Item>Home</Breadcrumb.Item>\n            <Breadcrumb.Item>List</Breadcrumb.Item>\n            <Breadcrumb.Item>App</Breadcrumb.Item>\n          </Breadcrumb>\n          <Layout className=\"site-layout-background\" style={{ padding: '24px 0' }}>\n            <Sider className=\"site-layout-background\" width={200}>\n              <Menu\n                mode=\"inline\"\n                defaultSelectedKeys={['1']}\n                // defaultOpenKeys={['sub1']}\n                style={{ height: '100%' }}\n              >\n                <SubMenu key=\"sub1\" icon={<UserOutlined />} title=\"My Profile\">\n                  <Menu.Item key=\"1\"><Link to=\"/profile\" >Profile</Link></Menu.Item>\n                  <Menu.Item key=\"2\"><Link to=\"/dialogs\" >Messages</Link></Menu.Item>\n                  <Menu.Item key=\"3\">option3</Menu.Item>\n                  <Menu.Item key=\"4\">option4</Menu.Item>\n                </SubMenu>\n                <SubMenu key=\"sub2\" icon={<LaptopOutlined />} title=\"Developers\">\n                  <Menu.Item key=\"5\"><Link to=\"/developers\" >Developers</Link></Menu.Item>\n                  <Menu.Item key=\"6\">option6</Menu.Item>\n                  <Menu.Item key=\"7\">option7</Menu.Item>\n                  <Menu.Item key=\"8\">option8</Menu.Item>\n                </SubMenu>\n                <SubMenu key=\"sub3\" icon={<NotificationOutlined />} title=\"subnav 3\">\n                  <Menu.Item key=\"9\">option9</Menu.Item>\n                  <Menu.Item key=\"10\">option10</Menu.Item>\n                  <Menu.Item key=\"11\">option11</Menu.Item>\n                  <Menu.Item key=\"12\">option12</Menu.Item>\n                </SubMenu>\n              </Menu>\n            </Sider>\n            <Content style={{ padding: '0 24px', minHeight: 280 }}>\n              <Switch>\n                <Route exact path='/' render={() => <Redirect to='/profile' />} />\n                <Route path='/profile/:userId?' render={() => <SuspendedProfile />} />\n                <Route path='/dialogs' render={() => <SuspendedDialogs />} />\n                <Route path='/developers' render={() => <UsersPage pageTitle='Самураи' />} />\n                <Route path='/auth' render={() => <Login />} />\n                <Route path='/*' render={() => <div>404 NOT FOUND</div>} />\n              </Switch>\n            </Content>\n          </Layout>\n        </Content>\n        <Footer style={{ textAlign: 'center' }}>Created by Rodion ©2021</Footer>\n      </Layout>\n      // <div className='app-wrapper'>\n      //   <HeaderContainer />\n      //   <Navbar />\n      //   <div className='app-wrapper-content'>\n      // <Switch>\n      //   <Route exact path='/' render={() => <Redirect to='/profile' />} />\n      //   <Route path='/profile/:userId?' render={() => <SuspendedProfile />} />\n      //   <Route path='/dialogs' render={() => <SuspendedDialogs />} />\n      //   <Route path='/users' render={() => <UsersPage pageTitle='Самураи' />} />\n      //   <Route path='/auth' render={() => <Login />} />\n      //   <Route path='/*' render={() => <div>404 NOT FOUND</div>} />\n      // </Switch>\n      //   </div>\n      // </div>\n    )\n  }\n}\nconst mapStateToProps = (state: AppStateType) => ({\n  inizialized: state.app.inizialized,\n  globalError: state.app.globalError\n})\nconst AppContainer = compose<React.ComponentType>(\n  connect(mapStateToProps, { inizializedApp, showGetError }))(App);\n\nconst SamuraiJSApp: React.FC = () => {\n  return <BrowserRouter basename={process.env.PUBLIC_URL}>\n    <Provider store={store}>\n      <AppContainer />\n    </Provider>\n  </BrowserRouter>\n}\nexport default SamuraiJSApp;","import reportWebVitals from './reportWebVitals';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport SamuraiJSApp from './App';\n\n\nReactDOM.render(\n    <SamuraiJSApp />\n    , document.getElementById('root'));\n\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","import React from 'react';\r\nimport { WrappedFieldMetaProps, WrappedFieldProps } from 'redux-form';\r\nimport style from './FormsControls.module.css'\r\n\r\n\r\ntype FormControlParamsType = {\r\n    // meta: {\r\n    //     touched: boolean,\r\n    //     error: string\r\n    // }\r\n    meta: WrappedFieldMetaProps,\r\n    input: string\r\n}\r\n\r\ntype FormControlPropsType = (params: FormControlParamsType) => React.ReactNode;\r\n\r\nconst FormControl = (Element: any): FormControlPropsType => (props) => {\r\n    const formError = props.meta.touched && props.meta.error\r\n    return (\r\n        <div className={style.formControl + ' ' + (formError ? style.error : '')}>\r\n            <div>\r\n                <Element {...props.input} {...props} />\r\n            </div>\r\n            {formError && <span>{props.meta.error}</span>}\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\n\r\nexport const Textarea = FormControl('textarea');\r\n\r\nexport const Input = FormControl('input');\r\n\r\n\r\n\r\n","export type FieldValidatorType = (value: string) => string | undefined\r\n\r\nexport const required: FieldValidatorType = (value) => {\r\n    if (value) return undefined;\r\n    return 'this field is required'\r\n}\r\nexport const maxLength = (countSymbols: number): FieldValidatorType => (value) => {\r\n    if (value.length > countSymbols) {\r\n        return `this field consists more then ${countSymbols} symbols`\r\n    }\r\n    return undefined\r\n}"],"sourceRoot":""}